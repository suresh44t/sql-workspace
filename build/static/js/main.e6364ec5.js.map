{"version":3,"file":"static/js/main.e6364ec5.js","mappings":"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","sources":["components/common/Button/Button.tsx","components/common/ErrorMessage/ErrorMessage.tsx","components/common/ErrorBoundary/ErrorBoundary.tsx","components/common/LoadingSpinner/LoadingSpinner.tsx","components/common/LoadingBackdrop/LoadingBackdrop.tsx","components/common/Select/Select.tsx","components/common/Toast/Toast.tsx","store/hooks.ts","store/slices/historySlice.ts","store/slices/resultsSlice.ts","utils/generateId.ts","utils/exportResultsData.ts","utils/reportWebVitals.ts","store/slices/querySlice.ts","store/slices/toastSlice.ts","hooks/useQuery.ts","hooks/useResults.ts","components/features/History/History.tsx","hooks/useHistory.ts","components/features/Query/CodeMirrorWithExtensions.tsx","components/features/Query/Query.tsx","components/features/Results/ResultsExport.tsx","components/features/Results/ResultsToolbar.tsx","constants/pagination.ts","components/features/Results/ResultsPagination.tsx","components/features/Results/Results.tsx","components/features/Toasts/Toasts.tsx","hooks/useToasts.ts","components/features/Workspace/Workspace.tsx","store/index.ts","App.tsx","index.tsx"],"sourcesContent":["// Component imports and type definitions\nimport { FC } from 'react'; \nimport { ButtonInterface } from '@/types';\nimport './Button.scss'; \n\n// Reusable button component with various styles and states\nexport const Button: FC<ButtonInterface> = ({ \n  variant = 'primary', \n  size = 'sm', \n  loading = false, \n  disabled = false, \n  className = '', \n  children, \n  ...props \n}) => { \n  // Combine class names based on props\n  const classes = [ \n    'button', \n    `button-${variant}`, \n    `button-${size}`, \n    loading && 'is-loading', \n    className \n  ].filter(Boolean).join(' '); \n\n  return ( \n    <button \n      className={classes} \n      disabled={disabled || loading} \n      {...props} \n    > \n      {loading && ( \n        <span className=\"button-spinner\" /> \n      )} \n      <span className={`button-text ${loading ? 'is-loading' : ''}`}> \n        {children} \n      </span> \n    </button> \n  ); \n}; \n\nButton.displayName = 'Button';\n","// Component imports and type definitions\nimport { FC } from 'react'; \nimport { ErrorMessageInterface } from '@/types';\nimport './ErrorMessage.scss'; \n\n// Display error messages with consistent styling\nexport const ErrorMessage: FC<ErrorMessageInterface> = ({ \n  error, \n  title = 'Error', \n  className = '' \n}) => { \n  // Convert error to string message\n  const errorMessage = error instanceof Error ? error.message : error;\n\n  return ( \n    <div \n      className={`error-message ${className}`.trim()} \n      role=\"alert\" \n      aria-label={title} \n    > \n      <div className=\"error-message-title\"> \n        {title} \n      </div> \n      <div className=\"error-message-content\"> \n        {errorMessage} \n      </div> \n    </div> \n  ); \n}; \n\nErrorMessage.displayName = 'ErrorMessage';\n","// React and component imports\nimport { Component, ErrorInfo } from 'react'; \nimport { ErrorMessage } from '../ErrorMessage/ErrorMessage'; \nimport { ErrorBoundaryInterface, ErrorBoundaryStateInterface } from '@/types'; \n\n// Error boundary component to catch and handle component errors\nexport class ErrorBoundary extends Component<ErrorBoundaryInterface, ErrorBoundaryStateInterface> { \n  // Initialize error state\n  public state: ErrorBoundaryStateInterface = { \n    hasError: false, \n    error: null, \n    errorInfo: null \n  }; \n\n  // Update state when error occurs\n  public static getDerivedStateFromError(error: Error): ErrorBoundaryStateInterface { \n    return { \n      hasError: true, \n      error, \n      errorInfo: null \n    }; \n  } \n\n  // Log error and call error handler\n  public componentDidCatch(error: Error, errorInfo: ErrorInfo) { \n    console.error('Error caught by boundary:', error, errorInfo); \n    this.setState({ errorInfo }); \n    this.props.onError?.(error, errorInfo); \n  } \n\n  // Render error UI or children\n  public render() { \n    const { \n      fallback, \n      className = '', \n      children \n    } = this.props; \n\n    if (this.state.hasError) { \n      const errorComponent = ( \n        <div \n          className={`error-boundary ${className}`.trim()} \n          role=\"alert\" \n        > \n          <ErrorMessage \n            title=\"Component Error\" \n            error={this.state.error?.message || 'An unexpected error occurred'} \n          /> \n        </div> \n      ); \n\n      return fallback || errorComponent; \n    } \n\n    return children; \n  } \n}\n","// Component imports and type definitions\nimport { FC } from 'react'; \nimport { LoadingSpinnerInterface } from '@/types'; \nimport './LoadingSpinner.scss'; \n\n// Animated spinner component with size and color variants\nexport const LoadingSpinner: FC<LoadingSpinnerInterface> = ({ \n  size = 'md', \n  variant = 'primary', \n  className = '' \n}) => { \n  return ( \n    <div \n      className={`loading-spinner size-${size} variant-${variant} ${className}`.trim()} \n      role=\"progressbar\" \n      aria-label=\"Loading\" \n    > \n      <svg \n        xmlns=\"http://www.w3.org/2000/svg\" \n        viewBox=\"0 0 24 24\" \n        fill=\"none\" \n        stroke=\"currentColor\" \n        strokeWidth=\"2\" \n        strokeLinecap=\"round\" \n        strokeLinejoin=\"round\" \n        aria-hidden=\"true\"  \n      > \n        <circle cx=\"12\" cy=\"12\" r=\"10\" opacity=\"0.25\" /> \n        <path \n          d=\"M12 2a10 10 0 0 1 10 10\" \n          opacity=\"0.75\" \n        /> \n      </svg> \n    </div> \n  ); \n}; \n\nLoadingSpinner.displayName = 'LoadingSpinner';\n","// Component imports and type definitions\nimport { FC } from 'react'; \nimport { LoadingSpinner } from '../LoadingSpinner/LoadingSpinner'; \nimport { LoadingBackdropInterface } from '@/types'; \nimport './LoadingBackdrop.scss'; \n\n// Overlay component to show loading state with spinner\nexport const LoadingBackdrop: FC<LoadingBackdropInterface> = ({ \n  isLoading = false, \n  className = '', \n  loadingMessage = 'Loading, please wait...' \n}) => { \n  // Only render when loading is active\n  if (!isLoading) {return null;} \n\n  return ( \n    <div \n      className={`backdrop ${className}`.trim()} \n      role=\"alert\" \n      aria-label={loadingMessage} \n    > \n      <div className=\"backdrop-content\"> \n        <LoadingSpinner \n          size=\"lg\" \n          variant=\"primary\" \n        /> \n        <span className=\"sr-only\"> \n          {loadingMessage} \n        </span> \n      </div> \n      <div \n        className=\"backdrop-overlay\" \n        aria-hidden=\"true\" \n      /> \n    </div> \n  ); \n}; \n\nLoadingBackdrop.displayName = 'LoadingBackdrop';\n","// Component imports and type definitions\nimport { FC, useState, useRef, useEffect } from 'react'; \nimport { SelectInterface, SelectOptionType } from '@/types';\nimport './Select.scss'; \n\n// Custom select component with keyboard navigation and accessibility\nexport const Select: FC<SelectInterface> = ({ \n  options, \n  value, \n  onChange, \n  placeholder = 'Select an option', \n  size = 'md', \n  variant = 'outlined', \n  className = '', \n  disabled = false, \n  direction = 'down', \n  'aria-label': ariaLabel \n}) => { \n  // Ref for dropdown positioning\n  const containerRef = useRef<HTMLDivElement>(null); \n\n  // State for dropdown visibility and keyboard navigation\n  const [isOpen, setIsOpen] = useState(false); \n  const [highlightedIndex, setHighlightedIndex] = useState(0); \n\n  // Handle clicks outside the select component\n  useEffect(() => { \n    const handler = (event: MouseEvent) => {\n      if (containerRef.current && !containerRef.current.contains(event.target as Node)) { \n        setIsOpen(false); \n      }\n    };\n\n    document.addEventListener('mousedown', handler); \n    return () => document.removeEventListener('mousedown', handler); \n  }, []); \n\n  // Derived values\n  const selectedOption = options.find(opt => opt.value === value); \n  const classes = [ \n    'select', \n    `select-${size}`, \n    `select-${variant}`, \n    isOpen && 'is-open', \n    disabled && 'is-disabled', \n    `select-${direction}`, \n    className \n  ].filter(Boolean).join(' '); \n\n  // Handle option selection and dropdown state\n  const handleOptionClick = (optionValue: string) => {\n    onChange(optionValue);\n    setIsOpen(false);\n  };\n\n  // Keyboard navigation and accessibility controls\n  const handleKeyDown = (e: React.KeyboardEvent) => { \n    if (disabled) return;\n\n    switch (e.key) { \n      case 'Enter': \n      case ' ': \n        e.preventDefault(); \n        if (isOpen) { \n          onChange(options[highlightedIndex].value); \n          setIsOpen(false); \n        } else { \n          setIsOpen(true); \n        } \n        break; \n\n      case 'ArrowUp': \n        e.preventDefault(); \n        if (!isOpen) { \n          setIsOpen(true); \n        } else { \n          setHighlightedIndex(Math.max(0, highlightedIndex - 1)); \n        } \n        break; \n\n      case 'ArrowDown': \n        e.preventDefault(); \n        if (!isOpen) { \n          setIsOpen(true); \n        } else { \n          setHighlightedIndex(Math.min(options.length - 1, highlightedIndex + 1)); \n        } \n        break; \n\n      case 'Escape': \n        if (isOpen) { \n          setIsOpen(false); \n        } \n        break; \n    } \n  }; \n\n  return ( \n    <div \n      ref={containerRef} \n      className={classes} \n      onKeyDown={handleKeyDown} \n      tabIndex={disabled ? -1 : 0} \n      role=\"combobox\"\n      aria-controls={`select-${options[0]?.value || 'options'}`}\n      aria-expanded={isOpen}\n      aria-haspopup=\"listbox\"\n      aria-activedescendant={isOpen ? `select-option-${highlightedIndex}` : undefined}\n      aria-label={ariaLabel || 'Select'} \n    > \n      <div \n        className=\"select-trigger\" \n        onClick={() => !disabled && setIsOpen(!isOpen)} \n      > \n        <span className=\"select-value\"> \n          {selectedOption ? selectedOption.label : placeholder} \n        </span> \n        <span className=\"select-arrow\" aria-hidden=\"true\" /> \n      </div> \n\n      {isOpen && !disabled && ( \n        <div \n          className=\"select-dropdown\" \n          role=\"listbox\"\n          id={`select-${options[0]?.value || 'options'}`}\n          data-direction={direction}\n        > \n          {options.map((option: SelectOptionType, index) => ( \n            <div \n              key={option.value} \n              className={[ \n                'select-option', \n                option.value === value && 'is-selected', \n                index === highlightedIndex && 'is-highlighted' \n              ].filter(Boolean).join(' ')} \n              onClick={() => handleOptionClick(option.value)} \n              role=\"option\"\n              id={`select-option-${index}`}\n              aria-selected={option.value === value} \n            > \n              {option.label} \n            </div> \n          ))} \n        </div> \n      )} \n    </div> \n  ); \n}; \n\nSelect.displayName = 'Select';\n","// Component imports and type definitions\nimport { FC, useEffect } from 'react'; \nimport { ToastProps } from '@/types'; \nimport './Toast.scss'; \n\n// Toast notification component with auto-dismiss\nexport const Toast: FC<ToastProps> = ({ \n  id, \n  message, \n  type, \n  onClose, \n  duration = 5000, \n  className = '' \n}) => { \n  // Setup auto-dismiss functionality\n  useEffect(() => { \n    const timer = setTimeout(() => onClose(id), duration); \n    return () => clearTimeout(timer); \n  }, [duration, onClose, id]); \n\n  // Combine class names based on type and props\n  const classes = [ \n    'toast', \n    `toast-${type}`, \n    className \n  ].filter(Boolean).join(' '); \n\n  return ( \n    <div \n      className={classes} \n      role={type === 'error' ? 'alert' : 'status'} \n    > \n      <div className=\"toast-content\"> \n        <div className=\"toast-message\"> \n          {message} \n        </div> \n      </div> \n    </div> \n  ); \n}; \n\nToast.displayName = 'Toast';\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'; \nimport { RootStoreInterface, AppDispatchType } from '@/types'; \n\n// Custom hooks with TypeScript support for Redux store\nexport const useAppDispatch = () => useDispatch<AppDispatchType>(); \nexport const useAppSelector: TypedUseSelectorHook<RootStoreInterface> = useSelector;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'; \nimport { \n  HistoryItemInterface, \n  HistoryStoreType \n} from '@/types'; \n\n// Initialize empty history store\nconst initialState: HistoryStoreType = { \n  items: [], \n  recentItems: [], \n  maxItems: 100, \n  metadata: { \n    totalItems: 0, \n    avgExecutionTime: 0, \n  }, \n}; \n\n// Define history state updates\nconst historySlice = createSlice({ \n  name: 'history', \n  initialState, \n  reducers: { \n    addItem(state, action: PayloadAction<HistoryItemInterface>) { \n      const item = action.payload; \n      state.items.unshift(item); \n      \n      // Calculate history statistics\n      state.metadata.totalItems = state.items.length; \n      \n      if (item.executionTime) { \n        const totalExecutionTime = state.items.reduce((sum, item) => \n          sum + (item.executionTime || 0), 0 \n        ); \n        state.metadata.avgExecutionTime = totalExecutionTime / state.items.length; \n      } \n      \n      // Keep most recent queries for quick access\n      state.recentItems = state.items.slice(0, 5); \n      \n      // Limit total history size\n      if (state.items.length > state.maxItems) { \n        state.items.pop(); \n      } \n    }, \n\n    // Reset history to initial state\n    clearHistory() { \n      return initialState; \n    } \n  } \n}); \n\n// Export history reducers\nexport const { \n  addItem, \n  clearHistory \n} = historySlice.actions; \n\n// Get history data from store\nexport const selectHistoryState = (state: { history: HistoryStoreType }) => state.history; \n// Get all history entries\nexport const selectHistoryItems = (state: { history: HistoryStoreType }) => state.history.items;\n// Get history statistics\nexport const selectHistoryMetadata = (state: { history: HistoryStoreType }) => state.history.metadata;\n// Get latest history entries\nexport const selectRecentHistoryItems = (state: { history: HistoryStoreType }) => state.history.recentItems;\n\nexport default historySlice.reducer;\n","import { createSlice, createSelector, PayloadAction } from '@reduxjs/toolkit';\nimport { \n  CompanyRecordInterface, \n  ColumnDefinitionInterface, \n  ResultsMetadataInterface, \n  ResultsStoreType, \n  ResultsDataInterface \n} from '@/types'; \n\n// Initialize empty results store\nconst initialState: ResultsStoreType = { \n  data: null, \n  status: 'idle', \n  error: null, \n  metadata: { \n    totalRows: 0, \n    executionTime: 0 \n  } \n}; \n\n// Define results state updates\nconst resultsSlice = createSlice({ \n  name: 'results', \n  initialState, \n  reducers: { \n    // Store query execution results\n    setResults(state, action: PayloadAction<ResultsDataInterface>) { \n      state.data = action.payload;\n      state.status = 'success'; \n      state.error = null; \n    }, \n    \n    // Set loading state during execution\n    setLoading(state) { \n      state.status = 'loading'; \n      state.error = null; \n    }, \n    \n    // Store execution error message\n    setError(state, action: PayloadAction<string>) { \n      state.status = 'error'; \n      state.error = action.payload; \n    }, \n\n    // Update execution statistics\n    updateMetadata(state, action: PayloadAction<Partial<ResultsMetadataInterface>>) { \n      state.metadata = { \n        ...state.metadata, \n        ...action.payload \n      }; \n    }, \n\n    // Reset results state\n    clearResults() { \n      return initialState; \n    } \n  } \n}); \n\n// Export results reducers\nexport const { \n  setResults, \n  setLoading, \n  setError, \n  updateMetadata, \n  clearResults \n} = resultsSlice.actions; \n\n// Get results data from store\nexport const selectResultsState = (state: { results: ResultsStoreType }) => state.results; \n \n// Get query result records\nexport const selectResultsData = createSelector( \n  [selectResultsState], \n  (state): CompanyRecordInterface[] | null => state.data?.results || null \n); \n\n// Get result column definitions\nexport const selectResultsColumns = createSelector( \n  [selectResultsState], \n  (state): ColumnDefinitionInterface[] => state.data?.columns || [] \n); \n\n// Get current execution status\nexport const selectResultsStatus = createSelector( \n  [selectResultsState], \n  (state) => state.status \n); \n\n// Get execution error if any\nexport const selectResultsError = createSelector( \n  [selectResultsState], \n  (state) => state.error \n); \n\n// Get execution statistics\nexport const selectResultsMetadata = createSelector( \n  [selectResultsState], \n  (state) => state.metadata \n); \n\nexport default resultsSlice.reducer;\n","import { v4 as uuid } from 'uuid'; \n\n// Generate unique identifier using UUID v4\nexport const generateId = (): string => { \n  return uuid(); \n};\n","import { saveAs } from 'file-saver';\nimport { \n  CompanyRecordInterface, \n  ColumnDefinitionInterface, \n  ExportFormatType \n} from '@/types'; \n\n// Convert any value to safe string format\nconst formatValue = (value: string | number | boolean | null | undefined): string => { \n  if (value === null || value === undefined) {return '';} \n  return String(value); \n}; \n\n// Export data to CSV format\nconst exportAsCSV = ( \n  data: CompanyRecordInterface[], \n  columns: ColumnDefinitionInterface[] \n): void => { \n  // Build CSV header from column labels\n  const csvHeader = columns.map(col => `\"${col.label}\"`).join(','); \n\n  // Convert records to CSV format\n  const csvRows = data.map(row => \n    columns \n      .map(col => `\"${formatValue(row[col.name])}\"`) \n      .join(',') \n  ); \n\n  // Join CSV rows into single string\n  const csvContent = [csvHeader, ...csvRows].join('\\n'); \n\n  // Create downloadable CSV file\n  const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8' }); \n  saveAs(blob, `query-results-${new Date().toISOString()}.csv`); \n}; \n\n// Export data to JSON format\nconst exportAsJSON = (data: CompanyRecordInterface[]): void => { \n  const jsonContent = JSON.stringify(data, null, 2); \n  const blob = new Blob([jsonContent], { type: 'application/json' }); \n  saveAs(blob, `query-results-${new Date().toISOString()}.json`); \n}; \n\n// Export results in selected format\nexport const exportResultsData = ( \n  format: ExportFormatType, \n  data: CompanyRecordInterface[], \n  columns: ColumnDefinitionInterface[] \n): void => { \n  if (!data?.length) {return;} \n\n  switch (format) { \n    case 'csv': \n      exportAsCSV(data, columns); \n      break; \n    case 'json': \n      exportAsJSON(data); \n      break; \n  } \n};\n","import { \n  ReportHandlerType, \n  CLSMetricInterface, \n  FIDMetricInterface, \n  FCPMetricInterface, \n  LCPMetricInterface, \n  TTFBMetricInterface, \n  BenchmarksInterface, \n  MetricKeyType, \n  MetricRatingType, \n  MetricRowDataInterface \n} from '@/types'; \n\n// Performance metric thresholds\nconst benchmarks: BenchmarksInterface = { \n  CLS: { good: 0.1, needsImprovement: 0.25, label: 'Cumulative Layout Shift' }, \n  FID: { good: 100, needsImprovement: 300, label: 'First Input Delay' }, \n  FCP: { good: 1800, needsImprovement: 3000, label: 'First Contentful Paint' }, \n  LCP: { good: 2500, needsImprovement: 4000, label: 'Largest Contentful Paint' }, \n  TTFB: { good: 800, needsImprovement: 1800, label: 'Time to First Byte' } \n}; \n\n// Calculate metric rating based on value\nconst getRating = (metric: MetricKeyType, value: number): MetricRatingType => { \n  const benchmark = benchmarks[metric]; \n  if (value <= benchmark.good) { \n    return ['Good', '#4caf50']; \n  } else if (value <= benchmark.needsImprovement) { \n    return ['Needs Improvement', '#ff9800']; \n  } else { \n    return ['Poor', '#f44336']; \n  } \n}; \n\n// Convert metric value to readable format\nconst formatValueWithUnit = (metric: MetricKeyType, value: number): string => { \n  switch (metric) { \n    case 'CLS': \n      return value.toFixed(3); \n    case 'FID': \n    case 'FCP': \n    case 'LCP': \n    case 'TTFB': \n      return value >= 1000 \n        ? `${(value / 1000).toFixed(2)}s` \n        : `${value.toFixed(0)}ms`; \n    default: \n      return value.toFixed(2); \n  } \n}; \n\n\n// Display formatted metric data in console\nconst printMetricTable = (metric: MetricKeyType, value: number): void => { \n  const benchmark = benchmarks[metric]; \n  const [rating, hexColor] = getRating(metric, value); \n\n  const threshold = benchmark.good; \n  const diff = value - threshold; \n\n  const rawValue = formatValueWithUnit(metric, value); \n  const rawThreshold = formatValueWithUnit(metric, threshold); \n  const rawDiff = formatValueWithUnit(metric, diff); \n\n  // Console styles for output\n  const styleValue = `color: ${hexColor}; font-weight: bold`;\n  const styleNormal = 'color: inherit';\n\n  // Format row data for table\n  const row: MetricRowDataInterface = { \n    Metric: metric, \n    Value: rawValue, \n    Threshold: rawThreshold, \n    Difference: rawDiff, \n    Status: rating \n  }; \n\n  // Determine column widths\n  const headers = Object.keys(row); \n  const widths = headers.map((h) => Math.max(h.length, row[h as keyof typeof row].length)); \n\n  // Pad cells to match column width\n  const formatCell = (str: string, width: number) => \n    str + ' '.repeat(width - str.length);\n\n  // Generate table structure\n  const headerRow = `│ ${headers.map((h, i) => formatCell(h, widths[i])).join(' │ ')} │`; \n  const separator = `├${widths.map(w => '─'.repeat(w + 2)).join('┼')}┤`; \n  const dataRow = `│ ${[ \n    formatCell(metric, widths[0]), \n    `%c${formatCell(rawValue, widths[1])}%c`, \n    formatCell(rawThreshold, widths[2]), \n    `%c${formatCell(rawDiff, widths[3])}%c`, \n    `%c${formatCell(rating, widths[4])}%c` \n  ].join(' │ ')} │`; \n  const borderTop = `┌${widths.map(w => '─'.repeat(w + 2)).join('┬')}┐`; \n  const borderBottom = `└${widths.map(w => '─'.repeat(w + 2)).join('┴')}┘`; \n\n  // Output metric table\n  const label = benchmark.label || metric; \n  console.group(`Web Vital: ${label} (${metric})`); \n  // Output table with styles\n  console.log(\n    [borderTop, headerRow, separator].join('\\n')\n  );\n  console.log(\n    dataRow, \n    styleValue, styleNormal, \n    styleValue, styleNormal,\n    styleValue, styleNormal\n  );\n  console.log(borderBottom);\n  console.groupEnd(); \n}; \n\n// Initialize web vitals monitoring\nexport const reportWebVitals = (onPerfEntry?: ReportHandlerType): void => { \n  if (onPerfEntry && onPerfEntry instanceof Function) { \n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => { \n      getCLS((metric: CLSMetricInterface) => { \n        printMetricTable('CLS', metric.value); \n        // onPerfEntry(metric); \n      }); \n\n      getFID((metric: FIDMetricInterface) => { \n        printMetricTable('FID', metric.value); \n        // onPerfEntry(metric); \n      }); \n\n      getFCP((metric: FCPMetricInterface) => { \n        printMetricTable('FCP', metric.value); \n        // onPerfEntry(metric); \n      }); \n\n      getLCP((metric: LCPMetricInterface) => { \n        printMetricTable('LCP', metric.value); \n        // onPerfEntry(metric); \n      }); \n\n      getTTFB((metric: TTFBMetricInterface) => { \n        printMetricTable('TTFB', metric.value); \n        // onPerfEntry(metric); \n      }); \n    }); \n  } \n};\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'; \nimport { AppThunkType } from '@/types'; \nimport { \n  setLoading, \n  setResults, \n  setError, \n  updateMetadata \n} from './resultsSlice'; \nimport { addItem } from './historySlice'; \nimport { generateId } from '@/utils'; \n\nimport { \n  QueryLanguageType, \n  QueryStoreType, \n  ResultsDataInterface, \n  ColumnDefinitionInterface, \n  HistoryItemInterface \n} from '@/types'; \n\n// Initial query editor configuration\nconst initialState: QueryStoreType = { \n  text: '', \n  isValid: false, \n  isDirty: false, \n  language: 'sql', \n  lastQuery: '' \n}; \n\n// Define query state updates\nconst querySlice = createSlice({ \n  name: 'query', \n  initialState, \n  reducers: { \n    // Update query editor content\n    setQuery(state, action: PayloadAction<string>) { \n      state.text = action.payload; \n      state.isDirty = true; \n    }, \n    \n    // Update syntax validation status\n    setValidity(state, action: PayloadAction<boolean>) { \n      state.isValid = action.payload; \n    }, \n\n    // Change SQL dialect type\n    setLanguage(state, action: PayloadAction<QueryLanguageType>) { \n      state.language = action.payload; \n    }, \n\n    // Save query as last executed\n    resetDirty(state) { \n      state.isDirty = false; \n      state.lastQuery = state.text; \n    }, \n\n    // Clear query editor state\n    resetQuery() { \n      return initialState; \n    } \n  } \n}); \n\n// Export query reducers\nexport const { \n  setQuery, \n  setValidity, \n  setLanguage, \n  resetDirty, \n  resetQuery \n} = querySlice.actions; \n\n// Async query execution\nexport const executeQuery = (): AppThunkType => \n  async (dispatch, getState) => { \n    const state = getState(); \n    const { text, isValid } = state.query; \n    \n    if (!text.trim() || !isValid) {return;} \n    \n    try { \n      dispatch(resetDirty()); \n      dispatch(setLoading()); \n\n      // Add artificial delay for demo\n      await new Promise(resolve => setTimeout(resolve, 1000)); \n      \n      // Extract target company from query\n      const match = text.match(/select \\* from (\\w+)/i); \n      if (!match) { \n        throw new Error('Invalid query format. Expected: select * from companyName'); \n      } \n      \n      const companyName = match[1].toLowerCase(); \n\n      // Load and generate mock data asynchronously\n      const { getMockData } = await import('@/data/mockData');\n      const mockData = await getMockData();\n      \n      // Filter results based on company name\n      const filteredResults = companyName === 'pega' \n        ? mockData \n        : mockData.filter(record => record.company === companyName);\n\n      if (filteredResults.length === 0) { \n        throw new Error(`No records found for company: ${companyName}`); \n      } \n      \n      // Configure result columns structure\n      const columns: ColumnDefinitionInterface[] = Object.entries(filteredResults[0]).map(([key, value]) => ({ \n        name: key, \n        label: key.charAt(0).toUpperCase() + key.slice(1), // Capitalize first letter \n        size: 150, // Default size \n        type: typeof value === 'number' ? 'number' : \n              typeof value === 'boolean' ? 'boolean' : \n              typeof value === 'string' && /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/.test(value) ? 'datetime' : \n              'string' \n      })); \n\n      // Save query execution results\n      const resultsData: ResultsDataInterface = { \n        results: filteredResults, \n        columns, \n        timestamp: Date.now() \n      }; \n      dispatch(setResults(resultsData)); \n\n      dispatch(updateMetadata({ \n        totalRows: filteredResults.length, \n        executionTime: 1 \n      })); \n\n      // Record successful query execution\n      const executionTime = 1; \n      const historyItem: Omit<HistoryItemInterface, 'id'> = { \n        text, \n        timestamp: Date.now(), \n        language: state.query.language, \n        executionTime, \n        rowCount: filteredResults.length \n      }; \n      dispatch(addItem({ ...historyItem, id: generateId() })); \n\n    } catch (error) { \n      dispatch(setError(error instanceof Error ? error.message : 'An error occurred')); \n    } \n  }; \n\n// Get query state from store\nexport const selectQueryState = (state: { query: QueryStoreType }) => state.query; \n// Get editor content\nexport const selectQueryText = (state: { query: QueryStoreType }) => state.query.text;\n// Get syntax validation status\nexport const selectQueryValidity = (state: { query: QueryStoreType }) => state.query.isValid;\n// Get selected SQL dialect\nexport const selectQueryLanguage = (state: { query: QueryStoreType }) => state.query.language;\n// Get modified status\nexport const selectQueryDirty = (state: { query: QueryStoreType }) => state.query.isDirty;\n// Get previously executed query\nexport const selectLastQuery = (state: { query: QueryStoreType }) => state.query.lastQuery;\n\nexport default querySlice.reducer;\n","import { createSlice, PayloadAction, createSelector } from '@reduxjs/toolkit'; \nimport { generateId } from '@/utils'; \nimport { \n  ToastVariantType, \n  ToastItemInterface, \n  ToastStatsInterface, \n  ToastsStoreType, \n  StateWithToast \n} from '@/types'; \n\n// Initialize notification system state\nconst initialState: ToastsStoreType = { \n  items: [], \n  limit: 5, \n  stats: { \n    total: 0, \n    byType: { \n      success: 0, \n      error: 0, \n      warning: 0, \n      info: 0 \n    } \n  } \n}; \n\n// Define notification state updates\nconst toastSlice = createSlice({ \n  name: 'toast', \n  initialState, \n  reducers: { \n    // Display new notification message\n    addToast: (state, action: PayloadAction<Omit<ToastItemInterface, 'id'>>) => { \n      const toast: ToastItemInterface = { \n        ...action.payload, \n        id: generateId() \n      }; \n      state.items.push(toast); \n      \n      // Update notification statistics\n      state.stats.total++; \n      state.stats.byType[toast.type]++; \n      \n      // Remove old notifications when limit reached\n      if (state.items.length > state.limit) { \n        const removed = state.items.shift(); \n        if (removed) { \n          state.stats.total--; \n          state.stats.byType[removed.type]--; \n        } \n      } \n    }, \n\n    // Remove single notification\n    removeToast: (state, action: PayloadAction<string>) => { \n      const removed = state.items.find(toast => toast.id === action.payload); \n      if (removed) { \n        state.items = state.items.filter(toast => toast.id !== action.payload); \n        state.stats.total--; \n        state.stats.byType[removed.type]--; \n      } \n    }, \n\n    // Remove all notifications\n    clearToasts: (state) => { \n      state.items = []; \n      state.stats = { \n        total: 0, \n        byType: { \n          success: 0, \n          error: 0, \n          warning: 0, \n          info: 0 \n        } \n      }; \n    } \n  } \n}); \n\n// Export notification reducers\nexport const { \n  addToast, \n  removeToast, \n  clearToasts \n} = toastSlice.actions; \n\n// Get notification data from store\nexport const selectAllToasts = (state: StateWithToast) => \n  state.toast.items; \n\n// Get subset of recent notifications\nexport const selectLimitedToasts = createSelector( \n  [ \n    (state: StateWithToast) => state.toast.items, \n    (_state: StateWithToast, limit: number) => limit \n  ], \n  (toasts, limit) => toasts.slice(-limit) \n); \n\n// Get most recent notification\nexport const selectLatestToast = createSelector( \n  [selectAllToasts], \n  (toasts): ToastItemInterface | null => toasts[toasts.length - 1] || null \n); \n\n// Group notifications by type\nexport const selectToastsByType = createSelector( \n  [selectAllToasts], \n  (toasts): Record<ToastVariantType, ToastItemInterface[]> => \n    toasts.reduce((acc, toast) => { \n      acc[toast.type] = acc[toast.type] || []; \n      acc[toast.type].push(toast); \n      return acc; \n    }, {} as Record<ToastVariantType, ToastItemInterface[]>) \n); \n\n// Get notification counts by type\nexport const selectToastStats = createSelector( \n  [selectAllToasts], \n  (toasts): ToastStatsInterface => ({ \n    total: toasts.length, \n    byType: { \n      success: toasts.filter(t => t.type === 'success').length, \n      error: toasts.filter(t => t.type === 'error').length, \n      warning: toasts.filter(t => t.type === 'warning').length, \n      info: toasts.filter(t => t.type === 'info').length \n    } \n  }) \n); \n\nexport default toastSlice.reducer;\n","import { useCallback } from 'react'; \nimport { useAppDispatch, useAppSelector } from '@/store/hooks'; \nimport { \n  selectQueryText, \n  selectQueryValidity, \n  selectQueryDirty, \n  selectQueryLanguage, \n  selectLastQuery, \n  setQuery, \n  setValidity, \n  setLanguage, \n  resetDirty, \n  executeQuery as executeQueryAction \n} from '@/store/slices'; \nimport { addToast } from '@/store/slices'; \nimport { UseQueryReturnInterface, QueryLanguageType } from '@/types'; \n\nexport const useQuery = (): UseQueryReturnInterface => { \n  // Get query state from store\n  const text = useAppSelector(selectQueryText); \n  const isValid = useAppSelector(selectQueryValidity); \n  const isDirty = useAppSelector(selectQueryDirty); \n  const language = useAppSelector(selectQueryLanguage); \n  const lastQuery = useAppSelector(selectLastQuery); \n  const dispatch = useAppDispatch(); \n\n  // Update editor content and state\n  const handleSetText = useCallback((value: string) => { \n    dispatch(setQuery(value)); \n  }, [dispatch]); \n\n  // Set syntax validation status\n  const handleSetValidity = useCallback((value: boolean) => { \n    dispatch(setValidity(value)); \n  }, [dispatch]); \n\n  // Reset modified state after save\n  const handleResetDirty = useCallback(() => { \n    dispatch(resetDirty()); \n  }, [dispatch]); \n\n  // Update SQL dialect selection\n  const handleSetLanguage = useCallback((value: QueryLanguageType) => { \n    dispatch(setLanguage(value)); \n  }, [dispatch]); \n\n  // Query execution and loading handlers\n  const handleExecuteQuery = useCallback(async () => { \n    if (!text.trim() || !isValid) {return;} \n\n    // Prevent duplicate query execution\n    if (text.trim() === lastQuery.trim()) { \n      dispatch(addToast({ \n        type: 'warning', \n        message: 'This query was just executed. Results are unchanged.', \n        duration: 3000 \n      })); \n      return; \n    } \n\n    await dispatch(executeQueryAction()); \n  }, [dispatch, text, isValid, lastQuery]); \n\n  const handleLoadQuery = useCallback(async (queryText: string) => { \n    // Prevent loading duplicate query\n    if (text === queryText) { \n      dispatch(addToast({ \n        type: 'warning', \n        message: 'This query is already in the editor.', \n        duration: 3000 \n      })); \n      return; \n    } \n\n    // Prevent rerunning same query\n    if (queryText === lastQuery) { \n      dispatch(addToast({ \n        type: 'warning', \n        message: 'This query matches the most recent execution. Results are unchanged.', \n        duration: 3000 \n      })); \n      return; \n    } \n\n    handleSetText(queryText); \n    handleSetValidity(true); // Mark loaded queries as valid \n    await dispatch(executeQueryAction()); \n  }, [handleSetText, handleSetValidity, text, lastQuery, dispatch]); \n\n  return { \n    // Editor content and status\n    text, \n    isValid, \n    isDirty, \n    language, \n    lastQuery, \n\n    // Query editing and execution methods\n    setText: handleSetText, \n    setValidity: handleSetValidity, \n    resetDirty: handleResetDirty, \n    setLanguage: handleSetLanguage, \n    executeQuery: handleExecuteQuery, \n    loadQuery: handleLoadQuery \n  }; \n};\n","import { useAppSelector, useAppDispatch } from '@/store/hooks'; \nimport { \n  selectResultsData, \n  selectResultsColumns, \n  selectResultsStatus, \n  selectResultsError, \n  selectResultsMetadata, \n  setResults as setResultsAction, \n  clearResults as clearResultsAction \n} from '@/store/slices'; \nimport { exportResultsData } from '@/utils'; \nimport { \n  UseResultsReturnInterface, \n  ResultsDataInterface, \n  ExportFormatType \n} from '@/types'; \n\nexport const useResults = (): UseResultsReturnInterface => { \n  // Get query results state from store\n  const results = useAppSelector(selectResultsData); \n  const columns = useAppSelector(selectResultsColumns); \n  const status = useAppSelector(selectResultsStatus); \n  const error = useAppSelector(selectResultsError); \n  const metadata = useAppSelector(selectResultsMetadata); \n  const dispatch = useAppDispatch(); \n\n  // Update results in store\n  const setResults = (data: ResultsDataInterface) => { \n    dispatch(setResultsAction(data)); \n  }; \n\n  // Reset query results state\n  const clearResults = () => { \n    dispatch(clearResultsAction()); \n  }; \n\n  // Export results to file in selected format\n  const exportData = (format: ExportFormatType) => { \n    if (results && columns) { \n      exportResultsData(format, results, columns); \n    } \n  }; \n\n  return { \n    // Results grid data and state\n    results, \n    columns, \n    status, \n    error, \n    metadata, \n\n    // Results manipulation methods\n    setResults, \n    clearResults, \n    exportData \n  }; \n};\n","// Component imports and type definitions\nimport { FC, memo, useCallback } from 'react'; \nimport { ErrorBoundary, LoadingBackdrop } from '@/components/common'; \nimport { useHistory, useQuery, useResults } from '@/hooks'; \nimport { \n  HistoryItemInterface, \n  HistoryInterface, \n  HistoryKeyNavigationHandler, \n  HistoryItemClickHandler \n} from '@/types'; \nimport './History.scss'; \n\n// Main history content component with memo for performance\nconst HistoryContent: FC<HistoryInterface> = memo(({ \n  className = '' \n}) => { \n  // Initialize hooks for history, query and results state\n  const { \n    items, \n    metadata \n  } = useHistory(); \n\n  const { text, loadQuery } = useQuery(); \n  const { status } = useResults(); \n\n  // Define loading state based on query execution status\n  const isLoading = status === 'loading'; \n\n  // Handle keyboard navigation between history items\n  const handleKeyNavigation: HistoryKeyNavigationHandler = useCallback((e: React.KeyboardEvent, index: number) => { \n    const historyItems = document.querySelectorAll('.history-item'); \n    \n    let nextIndex = -1; \n    switch (e.key) { \n      case 'ArrowDown': \n        e.preventDefault(); \n        nextIndex = index < items.length - 1 ? index + 1 : -1; \n        break; \n      case 'ArrowUp': \n        e.preventDefault(); \n        nextIndex = index > 0 ? index - 1 : -1; \n        break; \n    } \n\n    if (nextIndex !== -1) { \n      const targetElement = historyItems[nextIndex] as HTMLElement; \n      targetElement?.focus(); \n    } \n  }, [items.length]); \n\n  // Load selected query into editor\n  const handleItemClick: HistoryItemClickHandler = useCallback((entry: HistoryItemInterface) => {\n      loadQuery(entry.text); \n  }, [loadQuery]); \n\n  // Render history component structure\n  return ( \n    <div \n      id=\"history\" \n      className={`history ${className}`.trim()} \n      aria-label=\"Query History\" \n    > \n      <h2 className=\"history-header\" id=\"history-title\"> \n        Query History {metadata.totalItems > 0 && `(${metadata.totalItems})`} \n      </h2>\n\n      {items.length === 0 ? ( \n        <div className=\"history-empty\" role=\"status\"> \n          No queries executed yet \n        </div> \n      ) : ( \n        <ul className=\"history-list\" aria-labelledby=\"history-title\"> \n          {items.map((entry: HistoryItemInterface, index: number) => ( \n            <li \n              key={entry.id} \n              className={`history-item ${entry.executionTime ? 'is-success' : ''} ${index === 0 ? 'is-latest' : ''}`} \n              onClick={() => handleItemClick(entry)} \n              onKeyDown={(e) => { \n                handleKeyNavigation(e, index); \n                if (e.key === 'Enter' || e.key === ' ') { \n                  e.preventDefault(); \n                  handleItemClick(entry); \n                } \n              }} \n              tabIndex={0} \n              aria-label={`${index === 0 ? 'Latest query' : 'Previous query'}: ${entry.text}`} \n              aria-current={index === 0 ? 'true' : undefined} \n              aria-disabled={entry.text === text} \n            > \n              <div className=\"history-item-header\"> \n                <div className=\"history-item-time\"> \n                  {new Date(entry.timestamp).toLocaleTimeString()} \n                </div> \n                {entry.rowCount !== undefined && ( \n                  <div className=\"history-item-rows\"> \n                    {entry.rowCount.toLocaleString()} rows \n                  </div> \n                )} \n                {entry.executionTime !== undefined && ( \n                  <div className=\"history-item-duration\"> \n                    {Math.round(entry.executionTime)}ms \n                  </div> \n                )} \n              </div> \n              <div className=\"history-item-query\"> \n                {entry.text} \n              </div> \n            </li> \n          ))} \n        </ul>\n      )} \n\n      {isLoading && <LoadingBackdrop isLoading />} \n    </div> \n  ); \n}); \n\nHistoryContent.displayName = 'HistoryContent'; \n\n// Wrapper component with error boundary\nexport const History: FC<HistoryInterface> = props => {\n  return ( \n    <ErrorBoundary \n      onError={(error: Error) => { \n        console.error('History Error:', error); \n      }} \n    > \n      <HistoryContent {...props} /> \n    </ErrorBoundary> \n  ); \n}; \n\nHistory.displayName = 'History';\n","import { useCallback } from 'react'; \nimport { useAppDispatch, useAppSelector } from '@/store/hooks'; \nimport { \n  selectHistoryItems, \n  selectHistoryMetadata, \n  selectRecentHistoryItems, \n  addItem, \n  clearHistory, \n  selectQueryText, \n  selectQueryLanguage \n} from '@/store/slices'; \nimport { generateId } from '@/utils'; \n\nimport { \n  UseHistoryReturnInterface, \n  HistoryExecutionDataInterface, \n  HistoryItemInterface \n} from '@/types'; \n\nexport const useHistory = (): UseHistoryReturnInterface => { \n  // Get query history and current editor state\n  const items = useAppSelector(selectHistoryItems); \n  const metadata = useAppSelector(selectHistoryMetadata); \n  const recentItems = useAppSelector(selectRecentHistoryItems); \n  const currentText = useAppSelector(selectQueryText); \n  const currentLanguage = useAppSelector(selectQueryLanguage); \n  const dispatch = useAppDispatch(); \n\n  // Create new history entry with execution data\n  const handleAddToHistory = useCallback((executionData: HistoryExecutionDataInterface) => { \n    const historyItem: HistoryItemInterface = { \n      id: generateId(), \n      text: currentText, \n      timestamp: Date.now(), \n      language: currentLanguage, \n      ...executionData \n    }; \n    dispatch(addItem(historyItem)); \n  }, [dispatch, currentText, currentLanguage]); \n\n  // Remove all history entries\n  const handleClearHistory = () => { \n    dispatch(clearHistory()); \n  }; \n\n  // Provide history data and methods\n  return { \n    // Query execution history state\n    items, \n    metadata, \n    recentItems, \n\n    // History management methods\n    addToHistory: handleAddToHistory, \n    clearHistory: handleClearHistory, \n  }; \n};\n","import { lazy } from 'react';\nimport { CodeMirrorInterface } from '@/types/features/codemirror.types';\n\n// Lazy load CodeMirror with extensions\nconst CodeMirrorWithExtensions = lazy(async () => {\n  // Load all dependencies in parallel for maximum performance\n  const [\n    { default: CodeMirrorComponent },\n    sqlExtension,\n    theme\n  ] = await Promise.all([\n    import('@uiw/react-codemirror'),\n    import('@codemirror/lang-sql').then(mod => mod.sql()),\n    import('@uiw/codemirror-theme-vscode').then(mod => mod.vscodeLight)\n  ]);\n\n  // Return component with extensions pre-loaded\n  return {\n    default: ({ value, onChange, onKeyDown, basicSetup, editable, height, minHeight, ...props }: CodeMirrorInterface) => (\n      <CodeMirrorComponent\n        value={value}\n        onChange={onChange}\n        onKeyDown={onKeyDown}\n        basicSetup={basicSetup}\n        editable={editable}\n        height={height}\n        minHeight={minHeight}\n        {...props}\n        extensions={[sqlExtension, theme]}\n      />\n    )\n  };\n});\n\nexport default CodeMirrorWithExtensions;\n","import { FC, memo, useCallback, Suspense } from 'react';\nimport { Button, ErrorBoundary, Select, LoadingBackdrop } from '@/components/common';\nimport { useQuery, useResults } from '@/hooks';\nimport {\n  CompanyNameType,\n  QueryInterface,\n  QueryOptionsType,\n  PredefinedQueryType\n} from '@/types';\nimport CodeMirrorWithExtensions from './CodeMirrorWithExtensions';\nimport './Query.scss';\n\n// SQL query editor with code mirror integration\nconst QueryContent: FC<QueryInterface> = memo(({\n  className = ''\n}) => {\n  // Initialize query and results state\n  const {\n    text,\n    isValid,\n    setText,\n    setValidity,\n    executeQuery\n  } = useQuery();\n\n  const { status } = useResults();\n\n  // Track query execution status\n  const isLoading = status === 'loading';\n\n  // Handle query text changes and validation\n  const handleEditorChange = useCallback((value: string) => {\n    if (isLoading) { return; }\n    setText(value);\n\n    const trimmedValue = value.trim();\n    // Validate if query matches \"select * from companyName\" format \n    const isValidQuery = /^select \\* from \\w+$/i.test(trimmedValue);\n    setValidity(isValidQuery);\n  }, [isLoading, setText, setValidity]);\n\n  // Execute SQL query with validation\n  const handleExecute = useCallback(() => {\n    if (!text.trim() || !isValid || isLoading) { return; }\n    executeQuery();\n  }, [text, isValid, isLoading, executeQuery]);\n\n  // Handle keyboard shortcuts for query execution\n  const handleKeyDown = useCallback((e: React.KeyboardEvent) => {\n    if ((e.metaKey || e.ctrlKey) && e.key === 'Enter') {\n      e.preventDefault();\n      handleExecute();\n    }\n  }, [handleExecute]);\n\n  const queryOptions: QueryOptionsType = [\n    { value: '', label: 'Select a predefined SQL query' },\n    ...(['pega', 'atlan', 'google', 'microsoft', 'meta', 'apple'] as CompanyNameType[]).map(company => ({\n      value: `select * from ${company}`,\n      label: `SELECT * FROM ${company.toUpperCase()}`\n    } as PredefinedQueryType))\n  ];\n\n  return (\n    <section\n      id=\"query-editor\"\n      className={`query ${className}`.trim()}\n      aria-label=\"SQL Query Editor\"\n    >\n      <div className=\"query-editor\">\n        <div id=\"cm-input\" className=\"sr-only\">SQL Query Input</div>\n        <div\n          role=\"textbox\"\n          aria-invalid={!isValid && !!text}\n          aria-labelledby=\"cm-input\"\n          aria-required={true}\n        >\n          <Suspense \n            fallback={\n              <div \n                className=\"query-editor-loading\"\n                role=\"status\"\n                aria-live=\"polite\"\n              >\n                <span>Initializing editor components...</span>\n              </div>\n            }\n          >\n            <CodeMirrorWithExtensions\n              value={text}\n              onChange={handleEditorChange}\n              onKeyDown={handleKeyDown}\n              basicSetup={{\n                lineNumbers: true,\n                highlightActiveLine: true,\n                history: false,\n                drawSelection: false,\n                syntaxHighlighting: true,\n                indentOnInput: true,\n                tabSize: 2\n              }}\n              editable={!isLoading}\n              height=\"200px\"\n              minHeight=\"200px\"\n              aria-labelledby=\"cm-input\"\n              placeholder=\"Enter your SQL query here\"\n            />\n          </Suspense>\n        </div>\n      </div>\n\n      <div \n        className=\"query-actions\" \n        role=\"toolbar\" \n        aria-label=\"SQL Query Actions\" \n      > \n        <div className=\"select-container\">\n          <Select \n            options={queryOptions} \n            value={text} \n            onChange={useCallback((value: string) => { \n              setText(value); \n              setValidity(!!value); \n            }, [setText, setValidity])} \n            placeholder=\"Select a predefined SQL query\" \n            size=\"sm\" \n            variant=\"outlined\" \n            disabled={isLoading}\n            aria-label=\"Select a predefined SQL query template\" \n          />\n        </div>\n        <div className=\"button-container\">\n          <Button \n            onClick={() => {\n              setText('');\n              setValidity(false);\n            }}\n            variant=\"outlined\"\n            disabled={!text.trim()}\n            aria-label=\"Reset SQL query input\"\n          >\n            Reset\n          </Button> \n          <Button \n            onClick={handleExecute} \n            disabled={!text.trim() || !isValid} \n            aria-label=\"Execute SQL query\" \n          > \n            Execute Query \n          </Button> \n        </div>\n      </div> \n\n      {isLoading && (\n        <LoadingBackdrop\n          isLoading\n          loadingMessage=\"Executing SQL query, please wait...\"\n        />\n      )}\n    </section>\n  );\n});\n\nQueryContent.displayName = 'QueryContent';\n\n// Query component with error boundary wrapper\nexport const Query: FC<QueryInterface> = props => {\n  return (\n    <ErrorBoundary\n      onError={(error: Error) => {\n        console.error('SQL Query Editor Error:', error);\n      }}\n    >\n      <QueryContent {...props} />\n    </ErrorBoundary>\n  );\n};\n\nQuery.displayName = 'Query';\n","// Component imports and type definitions\nimport { FC } from 'react'; \nimport { Button } from '@/components/common'; \nimport { ExportFormatType, ResultsExportInterface } from '@/types'; \nimport './ResultsExport.scss'; \n\n// Export options component for results data\nexport const ResultsExport: FC<ResultsExportInterface> = ({ \n  onExport, \n  disabled = false, \n  'aria-label': ariaLabel, \n  'aria-controls': ariaControls, \n}) => { \n  // Handle keyboard accessibility for export buttons\n  const handleKeyDown = (e: React.KeyboardEvent, format: ExportFormatType) => { \n    if (e.key === 'Enter' || e.key === ' ') { \n      e.preventDefault(); \n      onExport(format); \n    } \n  }; \n\n  return ( \n    <section \n      className=\"results-export\" \n      role=\"group\" \n      aria-label={ariaLabel || \"Export options\"} \n      aria-controls={ariaControls} \n    > \n      <div className=\"results-export-buttons\"> \n        <Button \n          onClick={() => onExport('csv')} \n          onKeyDown={e => handleKeyDown(e, 'csv')} \n          disabled={disabled} \n          size=\"sm\" \n          aria-label=\"Export as CSV\" \n        > \n          Export CSV \n        </Button> \n\n        <Button \n          onClick={() => onExport('json')} \n          onKeyDown={e => handleKeyDown(e, 'json')} \n          disabled={disabled} \n          size=\"sm\" \n          aria-label=\"Export as JSON\" \n        > \n          Export JSON \n        </Button> \n      </div> \n    </section> \n  ); \n}; \n\nResultsExport.displayName = 'ResultsExport';\n","// Component imports and type definitions\nimport { FC } from 'react'; \nimport { ResultsExport } from './ResultsExport'; \nimport { ResultsToolbarInterface } from '@/types'; \nimport './ResultsToolbar.scss'; \n\n// Toolbar with search and export functionality\nconst ResultsToolbar: FC<ResultsToolbarInterface> = ({ \n  globalFilter, \n  onGlobalFilterChange, \n  onExport, \n  allowExport = true, \n  disabled = false \n}) => { \n  // Handle search input changes\n  const handleSearchChange = (value: string) => { \n    onGlobalFilterChange(value); \n  }; \n\n  // Clear search on escape key\n  const handleSearchKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => { \n    if (e.key === 'Escape' && globalFilter) { \n      e.preventDefault(); \n      handleSearchChange(''); \n      e.currentTarget.blur(); \n    } \n  }; \n\n  return ( \n    <div \n      className=\"results-toolbar\" \n      role=\"toolbar\" \n      aria-label=\"Results controls\" \n    > \n      <div className=\"results-search-wrapper\" role=\"search\"> \n        <label htmlFor=\"results-search\" className=\"sr-only\">Search results</label> \n        <input \n          id=\"results-search\"\n          type=\"search\" \n          value={globalFilter || ''} \n          onChange={e => handleSearchChange(e.target.value)} \n          onKeyDown={handleSearchKeyDown} \n          placeholder=\"Search results...\" \n          className=\"results-toolbar-search\" \n          disabled={disabled} \n        /> \n      </div> \n\n      {allowExport && ( \n        <ResultsExport \n          onExport={onExport} \n          disabled={disabled} \n          aria-label=\"Export options\" \n        /> \n      )} \n    </div> \n  ); \n}; \n\nResultsToolbar.displayName = 'ResultsToolbar'; \n\nexport default ResultsToolbar;\n","// Default pagination sizes for results grid\n// Initial page size\nexport const DEFAULT_PAGE_SIZE = 100;\nexport const PAGE_SIZES = [25, 50, 100, 250, 500] as const;\n","// Component imports and type definitions\nimport { FC, useCallback, useMemo } from 'react'; \nimport { Button, Select } from '@/components/common'; \nimport { ResultsPaginationInterface, PageSizeType } from '@/types'; \nimport { PAGE_SIZES } from '@/constants'; \nimport './ResultsPagination.scss'; \n\n// Pagination controls for results table\nconst ResultsPagination: FC<ResultsPaginationInterface> = ({ \n  pageIndex, \n  pageCount, \n  pageSize, \n  canPreviousPage, \n  canNextPage, \n  onPageSizeChange, \n  onPageChange, \n  onPreviousPage, \n  onNextPage \n}) => { \n  // Create options for rows per page select\n  const pageSizeOptions = useMemo(() => PAGE_SIZES.map((size: PageSizeType) => ({ \n    value: size.toString(), \n    label: `Show ${size} rows per page` \n  })), []); \n\n  // Handle rows per page selection\n  const handlePageSizeChange = useCallback((value: string) => { \n    onPageSizeChange(Number(value)); \n  }, [onPageSizeChange]); \n\n  // Keyboard navigation between pages\n  const handleKeyDown = (e: React.KeyboardEvent) => { \n    switch (e.key) { \n      case 'ArrowLeft': \n        if (canPreviousPage) { \n          e.preventDefault(); \n          onPreviousPage(); \n        } \n        break; \n      case 'ArrowRight': \n        if (canNextPage) { \n          e.preventDefault(); \n          onNextPage(); \n        } \n        break; \n    } \n  }; \n\n  return ( \n    <nav \n      className=\"results-pagination\" \n      aria-label=\"Results pagination\" \n      onKeyDown={handleKeyDown} \n    > \n      <div className=\"results-pagination-size\" role=\"group\" aria-label=\"Rows per page\"> \n        <Select \n          options={pageSizeOptions} \n          value={pageSize.toString()} \n          onChange={handlePageSizeChange} \n          size=\"sm\" \n          variant=\"outlined\" \n          direction=\"up\" \n          disabled={pageCount === 0} \n          aria-label=\"Select rows per page\" \n        /> \n      </div> \n\n      <div className=\"results-pagination-nav\" role=\"group\" aria-label=\"Page navigation\"> \n        <Button \n          size=\"sm\" \n          variant=\"outlined\" \n          onClick={() => onPageChange(0)} \n          disabled={!canPreviousPage} \n          aria-label=\"First page\" \n        > \n          {'<<'} \n        </Button> \n        <Button \n          size=\"sm\" \n          variant=\"outlined\" \n          onClick={onPreviousPage} \n          disabled={!canPreviousPage} \n          aria-label=\"Previous page\" \n        > \n          {'<'} \n        </Button> \n        <span className=\"results-pagination-info\" role=\"status\" aria-live=\"polite\"> \n          {pageCount === 0 ? ( \n            'Page 0 of 0' \n          ) : ( \n            `Page ${pageIndex + 1} of ${pageCount}` \n          )} \n        </span> \n        <Button \n          size=\"sm\" \n          variant=\"outlined\" \n          onClick={onNextPage} \n          disabled={!canNextPage} \n          aria-label=\"Next page\" \n        > \n          {'>'} \n        </Button> \n        <Button \n          size=\"sm\" \n          variant=\"outlined\" \n          onClick={() => onPageChange(pageCount - 1)} \n          disabled={!canNextPage} \n          aria-label=\"Last page\" \n        > \n          {'>>'} \n        </Button> \n      </div> \n    </nav> \n  ); \n}; \n\nResultsPagination.displayName = 'ResultsPagination'; \n\nexport default ResultsPagination;\n","import { FC, memo, useCallback, useMemo, useRef, useState } from 'react'; \nimport { ErrorMessage, ErrorBoundary, LoadingBackdrop } from '@/components/common'; \nimport { useResults } from '@/hooks'; \nimport { exportResultsData } from '@/utils'; \nimport { \n  ExportFormatType, \n  ResultsInterface, \n  ResultsSortingStateType, \n  ResultsColumnFiltersStateType, \n  ResultsPaginationStateType, \n  ColumnDefinitionInterface, \n  CompanyRecordInterface \n} from '@/types'; \nimport { \n  useReactTable, \n  getCoreRowModel, \n  getSortedRowModel, \n  getFilteredRowModel, \n  getPaginationRowModel, \n  ColumnDef as TableColumnDef, \n} from '@tanstack/react-table'; \nimport { useVirtualizer } from '@tanstack/react-virtual'; \nimport Toolbar from './ResultsToolbar'; \nimport Pagination from './ResultsPagination'; \nimport './Results.scss'; \n\nconst DEFAULT_PAGE_SIZE = 100; \n\n// Results grid with virtualization and sorting\nconst ResultsContent: FC<ResultsInterface> = memo(({ \n  config = { \n    allowExport: true \n  }, \n  className = '' \n}) => { \n  // Table state management\n  const [sorting, setSorting] = useState<ResultsSortingStateType>([]); \n  const [columnFilters, setColumnFilters] = useState<ResultsColumnFiltersStateType>([]); \n  const [globalFilter, setGlobalFilter] = useState(''); \n  const [pagination, setPagination] = useState<ResultsPaginationStateType>({ \n    pageIndex: 0, \n    pageSize: DEFAULT_PAGE_SIZE \n  }); \n\n  // DOM refs and data hooks\n  const tableContainerRef = useRef<HTMLDivElement>(null); \n  const headerRef = useRef<HTMLDivElement>(null); \n  const { results, columns, status, error } = useResults(); \n  const isLoading = status === 'loading'; \n\n  // Configure table columns and data\n  const tableColumns = useMemo<TableColumnDef<CompanyRecordInterface>[]>(() => \n    columns.map((col: ColumnDefinitionInterface) => ({ \n      id: col.name, \n      accessorKey: col.name, \n      header: col.label, \n      size: col.size \n    })) \n  , [columns]); \n\n  const tableData = useMemo(() => results || [], [results]); \n\n  // Initialize table with features\n  const table = useReactTable({ \n    data: tableData, \n    columns: tableColumns, \n    state: { \n      sorting, \n      columnFilters, \n      globalFilter, \n      pagination \n    }, \n    onSortingChange: setSorting, \n    onColumnFiltersChange: setColumnFilters, \n    onGlobalFilterChange: setGlobalFilter, \n    onPaginationChange: setPagination, \n    getCoreRowModel: getCoreRowModel(), \n    getSortedRowModel: getSortedRowModel(), \n    getFilteredRowModel: getFilteredRowModel(), \n    getPaginationRowModel: getPaginationRowModel(), \n    enableSorting: true \n  }); \n\n  // Virtual scroll optimization\n  const { rows } = table.getRowModel(); \n  const rowVirtualizer = useVirtualizer({ \n    count: rows.length, \n    getScrollElement: () => tableContainerRef.current, \n    estimateSize: () => 40, \n    overscan: 5 \n  }); \n\n  // Event handlers for table actions\n  const handleExport = useCallback((format: ExportFormatType) => { \n    if (!results?.length) {return;} \n    exportResultsData(format, results, columns); \n  }, [results, columns]); \n\n  const handleTableScroll = () => { \n    if (headerRef.current && tableContainerRef.current) { \n      headerRef.current.scrollLeft = tableContainerRef.current.scrollLeft; \n    } \n  }; \n\n  // Table header with sorting indicators\n  const renderTableHeader = () => { \n    if (!rows.length) {return null;} \n    \n    return ( \n      <div \n        ref={headerRef} \n        className=\"results-table-header\"\n        role=\"presentation\"\n      > \n        {table.getHeaderGroups().map(headerGroup => ( \n          <div key={headerGroup.id} className=\"results-header\" role=\"row\"> \n            {headerGroup.headers.map(header => ( \n              <div \n                key={header.id} \n                className=\"results-header-cell\" \n                role=\"columnheader\"\n                aria-sort={header.column.getIsSorted() === 'asc' ? 'ascending' : \n                          header.column.getIsSorted() === 'desc' ? 'descending' : \n                          'none'}\n                style={{ width: header.getSize() }} \n                onClick={header.column.getToggleSortingHandler()} \n              > \n                {String(header.column.columnDef.header)} \n                {header.column.getIsSorted() && ( \n                  <span className={`results-header-sort is-${header.column.getIsSorted()}`} aria-hidden=\"true\"> \n                    {header.column.getIsSorted() === 'asc' ? '↑' : '↓'} \n                  </span> \n                )} \n              </div> \n            ))} \n          </div> \n        ))} \n      </div> \n    ); \n  }; \n\n  return ( \n    <section \n      id=\"results\" \n      className={`results ${className}`.trim()} \n      aria-label=\"Query Results\" \n    > \n      <div className=\"results-content\"> \n        <Toolbar \n          globalFilter={globalFilter} \n          onGlobalFilterChange={setGlobalFilter} \n          onExport={handleExport} \n          allowExport={config.allowExport} \n          disabled={!results?.length} \n        /> \n\n        <div className=\"results-table\" role=\"grid\" aria-label=\"Query Results Table\"> \n          {renderTableHeader()} \n\n          <div \n            ref={tableContainerRef} \n            className=\"results-table-body\"\n            role=\"presentation\"\n            onScroll={handleTableScroll}\n          > \n            {error ? ( \n              <ErrorMessage \n                error={error} \n                title=\"Query Results Error\" \n              /> \n            ) : !rows.length ? ( \n              <div className=\"results-empty\" aria-live=\"polite\"> \n                No Results Found \n              </div> \n            ) : ( \n              rowVirtualizer.getVirtualItems().map(virtualRow => { \n                const row = rows[virtualRow.index]; \n                return ( \n                  <div \n                    key={row.id} \n                    className=\"results-row\" \n                    role=\"row\" \n                    style={{ \n                      position: 'absolute', \n                      top: 0, \n                      left: 0, \n                      width: '100%', \n                      height: `${virtualRow.size}px`, \n                      transform: `translateY(${virtualRow.start}px)` \n                    }} \n                  > \n                    {row.getVisibleCells().map(cell => ( \n                      <div \n                        key={cell.id} \n                        className=\"results-cell\" \n                        role=\"gridcell\" \n                        style={{ width: cell.column.getSize() }} \n                      > \n                        {String(cell.getValue())} \n                      </div> \n                    ))} \n                  </div> \n                ); \n              }) \n            )} \n          </div> \n        </div> \n\n        <Pagination \n          pageIndex={pagination.pageIndex} \n          pageCount={table.getPageCount()} \n          pageSize={pagination.pageSize} \n          canPreviousPage={table.getCanPreviousPage()} \n          canNextPage={table.getCanNextPage()} \n          onPageSizeChange={(size: number) => table.setPageSize(size)} \n          onPageChange={(index: number) => table.setPageIndex(index)} \n          onPreviousPage={() => table.previousPage()} \n          onNextPage={() => table.nextPage()} \n        /> \n      </div> \n\n      {isLoading && ( \n        <LoadingBackdrop \n          isLoading \n          loadingMessage=\"Loading query results...\" \n        /> \n      )} \n    </section> \n  ); \n}); \n\nResultsContent.displayName = 'ResultsContent'; \n\n// Results component with error boundary\nexport const Results: FC<ResultsInterface> = props => { \n  return ( \n    <ErrorBoundary \n      onError={(error: Error) => { \n        console.error('Results Error:', error); \n      }} \n    > \n      <ResultsContent {...props} /> \n    </ErrorBoundary> \n  ); \n}; \n\nResults.displayName = 'Results';\n","// Component imports and type definitions\nimport { FC } from 'react'; \nimport { ErrorBoundary, Toast } from '@/components/common'; \nimport { useToasts } from '@/hooks'; \nimport { ToastItemInterface } from '@/types'; \nimport './Toasts.scss'; \n\n// Toast notifications container component\nconst ToastsContent: FC = () => { \n  // Get active toasts from store\n  const { toasts, remove } = useToasts(); \n\n  // Only render if there are active toasts\n  if (!toasts.length) {return null;} \n\n  return ( \n    <div \n      className=\"toasts\" \n      role=\"complementary\" \n      aria-label=\"Notifications\" \n    > \n      {toasts.slice().reverse().map((toast: ToastItemInterface) => ( \n        <Toast \n          key={toast.id} \n          {...toast} \n          onClose={remove} \n        /> \n      ))} \n    </div> \n  ); \n}; \n\nToastsContent.displayName = 'ToastsContent'; \n\n// Toasts component with error boundary\nexport const Toasts: FC = () => { \n  return ( \n    <ErrorBoundary \n      onError={(error: Error) => { \n        console.error('Toasts Error:', error); \n      }} \n    > \n      <ToastsContent /> \n    </ErrorBoundary> \n  ); \n}; \n\nToasts.displayName = 'Toasts';\n","import { useCallback } from 'react'; \nimport { useAppDispatch, useAppSelector } from '@/store/hooks'; \nimport { \n  addToast, \n  removeToast, \n  clearToasts, \n  selectAllToasts, \n  selectLatestToast, \n  selectToastsByType, \n  selectToastStats \n} from '@/store/slices'; \nimport { \n  ToastOptionsInterface, \n  UseToastsReturnInterface, \n  ToastVariantType, \n  ToastItemInterface \n} from '@/types'; \n\nexport const useToasts = (): UseToastsReturnInterface => { \n  const dispatch = useAppDispatch(); \n\n  // Get toast notifications state from store\n  const toasts = useAppSelector(selectAllToasts); \n  const latestToast = useAppSelector(selectLatestToast); \n  const toastsByType = useAppSelector(selectToastsByType); \n  const stats = useAppSelector(selectToastStats); \n\n  // Create and display new toast notification\n  const showToast = useCallback(( \n    message: string, \n    type: ToastVariantType, \n    options: ToastOptionsInterface = {} \n  ) => { \n    const toast: Omit<ToastItemInterface, 'id'> = { \n      type, \n      message, \n      ...options \n    }; \n    dispatch(addToast(toast)); \n  }, [dispatch]); \n\n  // Toast removal handlers\n  const handleRemoveToast = (id: string) => { \n    dispatch(removeToast(id)); \n  }; \n\n  const handleClearToasts = () => { \n    dispatch(clearToasts()); \n  }; \n\n  // Convenience methods for different toast types\n  const success = (message: string, options?: ToastOptionsInterface) => \n    showToast(message, 'success', options); \n\n  const error = (message: string, options?: ToastOptionsInterface) => \n    showToast(message, 'error', options); \n\n  const warning = (message: string, options?: ToastOptionsInterface) => \n    showToast(message, 'warning', options); \n\n  const info = (message: string, options?: ToastOptionsInterface) => \n    showToast(message, 'info', options); \n\n  return { \n    // Current toast notifications\n    toasts, \n    latestToast, \n    toastsByType, \n    stats, \n\n    // Toast management methods\n    remove: handleRemoveToast, \n    clear: handleClearToasts, \n    success, \n    error, \n    warning, \n    info \n  }; \n};\n","// Component imports and type definitions\nimport { FC } from 'react'; \nimport { ErrorBoundary } from '@/components/common'; \nimport { Query } from '../Query/Query'; \nimport { Results } from '../Results/Results'; \nimport { History } from '../History/History'; \nimport { WorkspaceInterface } from '@/types'; \nimport './Workspace.scss'; \n\n// Main workspace layout component\nconst WorkspaceContent: FC<WorkspaceInterface> = ({ \n  className = '' \n}) => { \n  return ( \n    <main \n      className={`workspace ${className}`.trim()} \n      role=\"main\" \n      aria-label=\"SQL Query Workspace\" \n    > \n      <div \n        className=\"workspace-main\" \n        role=\"region\" \n        aria-label=\"Main Editor and Results Area\" \n      > \n        <Query /> \n        <Results \n          config={{ \n            allowExport: true \n          }} \n        /> \n      </div> \n\n      <aside \n        className='workspace-aside' \n        aria-label=\"Query History Panel\" \n      > \n        <History /> \n      </aside> \n    </main>\n  ); \n}; \n\nWorkspaceContent.displayName = 'WorkspaceContent'; \n\n// Workspace component with error boundary\nexport const Workspace: FC<WorkspaceInterface> = props => { \n  return ( \n    <ErrorBoundary \n      onError={(error: Error) => { \n        console.error('Workspace Error:', error); \n      }} \n    > \n      <WorkspaceContent {...props} /> \n    </ErrorBoundary> \n  ); \n}; \n\nWorkspace.displayName = 'Workspace';\n","import { configureStore } from '@reduxjs/toolkit'; \nimport { RootStoreInterface } from '@/types'; \nimport queryReducer from './slices/querySlice'; \nimport resultsReducer from './slices/resultsSlice'; \nimport historyReducer from './slices/historySlice'; \nimport toastReducer from './slices/toastSlice'; \n\n// Redux store configuration with feature reducers\nexport const store = configureStore<RootStoreInterface>({ \n  reducer: { \n    query: queryReducer, \n    results: resultsReducer, \n    history: historyReducer, \n    toast: toastReducer \n  } \n});\n","import { FC } from 'react'; \nimport { Workspace, Toasts } from '@/components/features'; \nimport { Provider as StoreProvider } from 'react-redux'; \nimport { store } from '@/store'; \nimport './styles/index.scss'; \n\n// Root application component with store provider\nconst App: FC = () => { \n  return ( \n    <StoreProvider store={store}> \n      <div className=\"app\"> \n        <Workspace /> \n        <Toasts /> \n      </div>\n    </StoreProvider>\n  ); \n}; \n\nexport default App;\n","import React from 'react';\nimport App from './App'; \nimport { createRoot } from 'react-dom/client'; \nimport { Provider } from 'react-redux'; \nimport { store } from './store'; \nimport { reportWebVitals } from './utils'; \n\nconst container = document.getElementById('root'); \nif (!container) {throw new Error('Failed to find the root element');} \nconst root = createRoot(container); \n\nroot.render( \n  <React.StrictMode> \n    <Provider store={store}> \n      <App /> \n    </Provider> \n  </React.StrictMode> \n); \n\n// If you want to start measuring performance in your app, pass a function \n// to log results (for example: reportWebVitals(console.log)) \n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals \n// Report web vitals with console logging \nreportWebVitals(console.log);\n"],"names":["Button","_ref","variant","size","loading","disabled","className","children","props","_objectWithoutProperties","_excluded","classes","concat","filter","Boolean","join","_jsxs","_objectSpread","_jsx","displayName","ErrorMessage","error","title","errorMessage","Error","message","trim","role","ErrorBoundary","Component","constructor","arguments","state","hasError","errorInfo","getDerivedStateFromError","componentDidCatch","_this$props$onError","_this$props","console","this","setState","onError","call","render","fallback","_this$state$error","errorComponent","LoadingSpinner","xmlns","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","cx","cy","r","opacity","d","LoadingBackdrop","isLoading","loadingMessage","Select","_options$","_options$2","options","value","onChange","placeholder","direction","ariaLabel","containerRef","useRef","isOpen","setIsOpen","useState","highlightedIndex","setHighlightedIndex","useEffect","handler","event","current","contains","target","document","addEventListener","removeEventListener","selectedOption","find","opt","ref","onKeyDown","e","key","preventDefault","Math","max","min","length","tabIndex","undefined","onClick","label","id","map","option","index","handleOptionClick","optionValue","Toast","type","onClose","duration","timer","setTimeout","clearTimeout","useAppDispatch","useDispatch","useAppSelector","useSelector","initialState","items","recentItems","maxItems","metadata","totalItems","avgExecutionTime","historySlice","createSlice","name","reducers","addItem","action","item","payload","unshift","executionTime","totalExecutionTime","reduce","sum","slice","pop","clearHistory","actions","selectHistoryItems","history","selectHistoryMetadata","selectRecentHistoryItems","data","status","totalRows","resultsSlice","setResults","setLoading","setError","updateMetadata","clearResults","selectResultsState","results","selectResultsData","createSelector","_state$data","selectResultsColumns","_state$data2","columns","selectResultsStatus","selectResultsError","selectResultsMetadata","generateId","uuid","exportResultsData","format","exportAsCSV","csvContent","col","row","String","blob","Blob","saveAs","Date","toISOString","jsonContent","JSON","stringify","exportAsJSON","benchmarks","CLS","good","needsImprovement","FID","FCP","LCP","TTFB","formatValueWithUnit","metric","toFixed","printMetricTable","benchmark","rating","hexColor","getRating","threshold","diff","rawValue","rawThreshold","rawDiff","styleValue","styleNormal","Metric","Value","Threshold","Difference","Status","headers","Object","keys","widths","h","formatCell","str","width","repeat","headerRow","i","separator","w","dataRow","borderTop","borderBottom","group","log","groupEnd","text","isValid","isDirty","language","lastQuery","querySlice","setQuery","setValidity","setLanguage","resetDirty","resetQuery","executeQuery","async","dispatch","getState","query","Promise","resolve","match","companyName","toLowerCase","getMockData","mockData","filteredResults","record","company","resultsData","entries","charAt","toUpperCase","test","timestamp","now","historyItem","rowCount","selectQueryText","selectQueryValidity","selectQueryLanguage","selectQueryDirty","selectLastQuery","toastSlice","limit","stats","total","byType","success","warning","info","addToast","toast","push","removed","shift","removeToast","clearToasts","selectAllToasts","selectLatestToast","_state","toasts","selectToastsByType","acc","selectToastStats","t","useQuery","handleSetText","useCallback","handleSetValidity","handleResetDirty","handleSetLanguage","handleExecuteQuery","executeQueryAction","handleLoadQuery","queryText","setText","loadQuery","useResults","setResultsAction","clearResultsAction","exportData","HistoryContent","memo","useHistory","currentText","currentLanguage","addToHistory","executionData","handleClearHistory","handleKeyNavigation","historyItems","querySelectorAll","nextIndex","targetElement","focus","handleItemClick","entry","toLocaleTimeString","toLocaleString","round","History","lazy","default","CodeMirrorComponent","sqlExtension","theme","all","then","mod","sql","vscodeLight","basicSetup","editable","height","minHeight","extensions","QueryContent","handleEditorChange","trimmedValue","isValidQuery","handleExecute","handleKeyDown","metaKey","ctrlKey","queryOptions","Suspense","CodeMirrorWithExtensions","lineNumbers","highlightActiveLine","drawSelection","syntaxHighlighting","indentOnInput","tabSize","Query","ResultsExport","onExport","ariaControls","ResultsToolbar","globalFilter","onGlobalFilterChange","allowExport","handleSearchChange","htmlFor","currentTarget","blur","PAGE_SIZES","ResultsPagination","pageIndex","pageCount","pageSize","canPreviousPage","canNextPage","onPageSizeChange","onPageChange","onPreviousPage","onNextPage","pageSizeOptions","useMemo","toString","handlePageSizeChange","Number","ResultsContent","config","sorting","setSorting","columnFilters","setColumnFilters","setGlobalFilter","pagination","setPagination","tableContainerRef","headerRef","tableColumns","accessorKey","header","tableData","table","useReactTable","onSortingChange","onColumnFiltersChange","onPaginationChange","getCoreRowModel","getSortedRowModel","getFilteredRowModel","getPaginationRowModel","enableSorting","rows","getRowModel","rowVirtualizer","useVirtualizer","count","getScrollElement","estimateSize","overscan","handleExport","Toolbar","getHeaderGroups","headerGroup","column","getIsSorted","style","getSize","getToggleSortingHandler","columnDef","onScroll","handleTableScroll","scrollLeft","getVirtualItems","virtualRow","position","top","left","transform","start","getVisibleCells","cell","getValue","Pagination","getPageCount","getCanPreviousPage","getCanNextPage","setPageSize","setPageIndex","previousPage","nextPage","Results","ToastsContent","remove","useToasts","latestToast","toastsByType","showToast","clear","handleClearToasts","reverse","Toasts","WorkspaceContent","Workspace","store","configureStore","reducer","queryReducer","resultsReducer","historyReducer","toastReducer","App","StoreProvider","container","getElementById","onPerfEntry","createRoot","React","Provider","Function","getCLS","getFID","getFCP","getLCP","getTTFB"],"sourceRoot":""}