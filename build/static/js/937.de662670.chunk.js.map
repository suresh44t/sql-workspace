{"version":3,"file":"static/js/937.de662670.chunk.js","mappings":"wIAQO,MAuBDA,EAAc,CAClB,cACA,QACA,YACA,UACA,KACA,UACA,cAIIC,EAAa,CACjB,aACA,WACA,iBACA,eACA,cAIIC,EAA+B,CAAC,QAAS,SAAU,YAAa,OAAQ,SAuCjEC,EAAcC,UACzB,IAAIC,EAMJ,OAJKA,IACHA,OA/B4BD,WAE9B,MAAM,MAAEE,SAAgB,8BAClBC,EAAoC,GAG1C,IAAK,IAAIC,EAAI,EAAGA,EAAI,IAAOA,IAAK,CAC9B,MAAMC,EAAUP,EAAUM,EAAIN,EAAUQ,QACxCH,EAAQI,KAAK,CACXC,GAAIJ,EAAI,EACRC,UACAI,WAAYP,EAAMQ,QAAQC,aAAaf,GACvCgB,eAAgBV,EAAMW,OAAOC,IAAI,CAAEC,IAAK,IAAKC,IAAK,MAClDC,QAASf,EAAMW,OAAOC,IAAI,CAAEC,IAAK,IAASC,IAAK,MAC/CE,SAAUhB,EAAMgB,SAASC,OACzBC,aAAclB,EAAMW,OAAOC,IAAI,CAAEC,IAAK,KAAMC,IAAK,OACjDK,IAAKnB,EAAMoB,OAAOC,WAClBC,SAAUtB,EAAMQ,QAAQC,aAAad,GACrC4B,cAAevB,EAAMW,OAAOC,IAAI,CAAEC,IAAK,GAAIC,IAAK,MAChDU,cA5BcC,EA4BWzB,EAAMyB,KAAKC,SA3BjCD,EAAKE,mBAAmB,QAAS,CACtCC,KAAM,UACNC,MAAO,QACPC,IAAK,cA0BP,CA9BkBL,MAgClB,OAAOxB,GAQQ8B,IAGRhC,E","sources":["data/mockData.ts"],"sourcesContent":["import { \n  CompanyNameType, \n  CompanyRecordInterface, \n  ColumnWidthsType, \n  ColumnDefinitionInterface \n} from '@/types'; \n\n// Define column width constants for grid layout\nexport const COLUMN_WIDTHS: ColumnWidthsType = { \n  DEFAULT: 150, \n  SMALL: 120, \n  MEDIUM: 180, \n  LARGE: 220 \n}; \n\n// Configure grid columns with metadata\nexport const columnDefinitions: ColumnDefinitionInterface[] = [ \n  { name: 'id', type: 'number', label: 'ID', size: COLUMN_WIDTHS.SMALL }, \n  { name: 'company', type: 'string', label: 'Company', size: COLUMN_WIDTHS.MEDIUM }, \n  { name: 'department', type: 'string', label: 'Department', size: COLUMN_WIDTHS.MEDIUM }, \n  { name: 'employee_count', type: 'number', label: 'Employee Count', size: COLUMN_WIDTHS.MEDIUM }, \n  { name: 'revenue', type: 'number', label: 'Revenue ($)', size: COLUMN_WIDTHS.MEDIUM }, \n  { name: 'location', type: 'string', label: 'Location', size: COLUMN_WIDTHS.MEDIUM }, \n  { name: 'founded_year', type: 'number', label: 'Founded Year', size: COLUMN_WIDTHS.SMALL }, \n  { name: 'ceo', type: 'string', label: 'CEO', size: COLUMN_WIDTHS.LARGE }, \n  { name: 'industry', type: 'string', label: 'Industry', size: COLUMN_WIDTHS.MEDIUM }, \n  { name: 'project_count', type: 'number', label: 'Projects', size: COLUMN_WIDTHS.SMALL }, \n  { name: 'last_updated', type: 'date', label: 'Last Updated', size: COLUMN_WIDTHS.MEDIUM } \n]; \n\n// Available department options for mock data\nconst departments = [ \n  'Engineering', \n  'Sales', \n  'Marketing', \n  'Finance', \n  'HR', \n  'Product', \n  'Operations' \n]; \n\n// Industry categories for mock records\nconst industries = [ \n  'Technology', \n  'Software', \n  'Cloud Services', \n  'Social Media', \n  'E-commerce' \n]; \n\n// List of companies to generate data for\nconst companies: CompanyNameType[] = ['atlan', 'google', 'microsoft', 'meta', 'apple']; \n\n// Format date to consistent string format\nconst formatDate = (date: Date): string => { \n  return date.toLocaleDateString('en-US', { \n    year: 'numeric', \n    month: 'short', \n    day: 'numeric' \n  }); \n}; \n\n// Generate mock data asynchronously\nexport const generateMockData = async (): Promise<CompanyRecordInterface[]> => {\n  // Dynamic import of faker\n  const { faker } = await import('@faker-js/faker');\n  const records: CompanyRecordInterface[] = []; \n\n  // Create mock records with random but realistic data\n  for (let i = 0; i < 10000; i++) { \n    const company = companies[i % companies.length] as CompanyNameType; \n    records.push({ \n      id: i + 1, \n      company, \n      department: faker.helpers.arrayElement(departments), \n      employee_count: faker.number.int({ min: 100, max: 10000 }), \n      revenue: faker.number.int({ min: 1000000, max: 1000000000 }), \n      location: faker.location.city(), \n      founded_year: faker.number.int({ min: 1990, max: 2020 }), \n      ceo: faker.person.fullName(), \n      industry: faker.helpers.arrayElement(industries), \n      project_count: faker.number.int({ min: 10, max: 1000 }), \n      last_updated: formatDate(faker.date.recent()) \n    }); \n  } \n\n  return records; \n}; \n\n// Lazy load and generate mock data\nexport const getMockData = async () => {\n  let data: CompanyRecordInterface[] | undefined;\n  \n  if (!data) {\n    data = await generateMockData();\n  }\n  \n  return data;\n};\n"],"names":["departments","industries","companies","getMockData","async","data","faker","records","i","company","length","push","id","department","helpers","arrayElement","employee_count","number","int","min","max","revenue","location","city","founded_year","ceo","person","fullName","industry","project_count","last_updated","date","recent","toLocaleDateString","year","month","day","generateMockData"],"sourceRoot":""}