{"version":3,"file":"static/js/main.3e6a0a0d.js","mappings":"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","sources":["../webpack/runtime/chunk loaded","../webpack/runtime/load script","data/mockData.ts","components/common/Button/Button.tsx","components/common/ErrorMessage/ErrorMessage.tsx","components/common/ErrorBoundary/ErrorBoundary.tsx","components/common/LoadingSpinner/LoadingSpinner.tsx","components/common/LoadingBackdrop/LoadingBackdrop.tsx","components/common/Select/Select.tsx","components/common/Toast/Toast.tsx","store/hooks.ts","store/slices/historySlice.ts","store/slices/resultsSlice.ts","utils/generateId.ts","utils/exportResultsData.ts","utils/reportWebVitals.ts","store/slices/querySlice.ts","store/slices/toastSlice.ts","hooks/useQuery.ts","hooks/useResults.ts","components/features/History/History.tsx","hooks/useHistory.ts","components/features/Query/Query.tsx","components/features/Results/ResultsExport.tsx","components/features/Results/ResultsToolbar.tsx","constants/pagination.ts","components/features/Results/ResultsPagination.tsx","components/features/Results/Results.tsx","components/features/Toasts/Toasts.tsx","hooks/useToasts.ts","components/features/Workspace/Workspace.tsx","store/index.ts","App.tsx","index.tsx","../webpack/bootstrap","../webpack/runtime/define property getters","../webpack/runtime/ensure chunk","../webpack/runtime/get javascript chunk filename","../webpack/runtime/get mini-css chunk filename","../webpack/runtime/global","../webpack/runtime/hasOwnProperty shorthand","../webpack/runtime/make namespace object","../webpack/runtime/publicPath","../webpack/runtime/jsonp chunk loading","../webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","var inProgress = {};\nvar dataWebpackPrefix = \"sql-workspace:\";\n// loadScript function to load a script via script tag\n__webpack_require__.l = (url, done, key, chunkId) => {\n\tif(inProgress[url]) { inProgress[url].push(done); return; }\n\tvar script, needAttach;\n\tif(key !== undefined) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tfor(var i = 0; i < scripts.length; i++) {\n\t\t\tvar s = scripts[i];\n\t\t\tif(s.getAttribute(\"src\") == url || s.getAttribute(\"data-webpack\") == dataWebpackPrefix + key) { script = s; break; }\n\t\t}\n\t}\n\tif(!script) {\n\t\tneedAttach = true;\n\t\tscript = document.createElement('script');\n\n\t\tscript.charset = 'utf-8';\n\t\tscript.timeout = 120;\n\t\tif (__webpack_require__.nc) {\n\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n\t\t}\n\t\tscript.setAttribute(\"data-webpack\", dataWebpackPrefix + key);\n\n\t\tscript.src = url;\n\t}\n\tinProgress[url] = [done];\n\tvar onScriptComplete = (prev, event) => {\n\t\t// avoid mem leaks in IE.\n\t\tscript.onerror = script.onload = null;\n\t\tclearTimeout(timeout);\n\t\tvar doneFns = inProgress[url];\n\t\tdelete inProgress[url];\n\t\tscript.parentNode && script.parentNode.removeChild(script);\n\t\tdoneFns && doneFns.forEach((fn) => (fn(event)));\n\t\tif(prev) return prev(event);\n\t}\n\tvar timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);\n\tscript.onerror = onScriptComplete.bind(null, script.onerror);\n\tscript.onload = onScriptComplete.bind(null, script.onload);\n\tneedAttach && document.head.appendChild(script);\n};","import { faker } from '@faker-js/faker'; \r\nimport { \r\n  CompanyNameType, \r\n  CompanyRecordInterface, \r\n  ColumnWidthsType, \r\n  ColumnDefinitionInterface \r\n} from '@/types'; \r\n\r\n// Define column width constants for grid layout\r\nexport const COLUMN_WIDTHS: ColumnWidthsType = { \r\n  DEFAULT: 150, \r\n  SMALL: 120, \r\n  MEDIUM: 180, \r\n  LARGE: 220 \r\n}; \r\n\r\n// Configure grid columns with metadata\r\nexport const columnDefinitions: ColumnDefinitionInterface[] = [ \r\n  { name: 'id', type: 'number', label: 'ID', size: COLUMN_WIDTHS.SMALL }, \r\n  { name: 'company', type: 'string', label: 'Company', size: COLUMN_WIDTHS.MEDIUM }, \r\n  { name: 'department', type: 'string', label: 'Department', size: COLUMN_WIDTHS.MEDIUM }, \r\n  { name: 'employee_count', type: 'number', label: 'Employee Count', size: COLUMN_WIDTHS.SMALL }, \r\n  { name: 'revenue', type: 'number', label: 'Revenue ($)', size: COLUMN_WIDTHS.MEDIUM }, \r\n  { name: 'location', type: 'string', label: 'Location', size: COLUMN_WIDTHS.MEDIUM }, \r\n  { name: 'founded_year', type: 'number', label: 'Founded Year', size: COLUMN_WIDTHS.SMALL }, \r\n  { name: 'ceo', type: 'string', label: 'CEO', size: COLUMN_WIDTHS.LARGE }, \r\n  { name: 'industry', type: 'string', label: 'Industry', size: COLUMN_WIDTHS.MEDIUM }, \r\n  { name: 'project_count', type: 'number', label: 'Projects', size: COLUMN_WIDTHS.SMALL }, \r\n  { name: 'last_updated', type: 'date', label: 'Last Updated', size: COLUMN_WIDTHS.MEDIUM } \r\n]; \r\n\r\n// Available department options for mock data\r\nconst departments = [ \r\n  'Engineering', \r\n  'Sales', \r\n  'Marketing', \r\n  'Finance', \r\n  'HR', \r\n  'Product', \r\n  'Operations' \r\n]; \r\n\r\n// Industry categories for mock records\r\nconst industries = [ \r\n  'Technology', \r\n  'Software', \r\n  'Cloud Services', \r\n  'Social Media', \r\n  'E-commerce' \r\n]; \r\n\r\n// List of companies to generate data for\r\nconst companies: CompanyNameType[] = ['atlan', 'google', 'microsoft', 'meta', 'apple']; \r\n\r\n// Format date to consistent string format\r\nconst formatDate = (date: Date): string => { \r\n  return date.toLocaleDateString('en-US', { \r\n    year: 'numeric', \r\n    month: 'short', \r\n    day: 'numeric' \r\n  }); \r\n}; \r\n\r\nexport const generateMockData = (): CompanyRecordInterface[] => { \r\n  const records: CompanyRecordInterface[] = []; \r\n\r\n  // Create mock records with random but realistic data\r\n  for (let i = 0; i < 10000; i++) { \r\n    const company = companies[i % companies.length] as CompanyNameType; \r\n    records.push({ \r\n      id: i + 1, \r\n      company, \r\n      department: faker.helpers.arrayElement(departments), \r\n      employee_count: faker.number.int({ min: 100, max: 10000 }), \r\n      revenue: faker.number.int({ min: 1000000, max: 1000000000 }), \r\n      location: faker.location.city(), \r\n      founded_year: faker.number.int({ min: 1990, max: 2020 }), \r\n      ceo: faker.person.fullName(), \r\n      industry: faker.helpers.arrayElement(industries), \r\n      project_count: faker.number.int({ min: 10, max: 1000 }), \r\n      last_updated: formatDate(faker.date.recent()) \r\n    }); \r\n  } \r\n\r\n  return records; \r\n}; \r\n\r\n// Generate and memoize mock data\r\nexport const mockData = generateMockData();\r\n","// Component imports and type definitions\r\nimport { FC } from 'react'; \r\nimport { ButtonInterface } from '@/types';\r\nimport './Button.scss'; \r\n\r\n// Reusable button component with various styles and states\r\nexport const Button: FC<ButtonInterface> = ({ \r\n  variant = 'primary', \r\n  size = 'sm', \r\n  loading = false, \r\n  disabled = false, \r\n  className = '', \r\n  children, \r\n  ...props \r\n}) => { \r\n  // Combine class names based on props\r\n  const classes = [ \r\n    'button', \r\n    `button-${variant}`, \r\n    `button-${size}`, \r\n    loading && 'is-loading', \r\n    className \r\n  ].filter(Boolean).join(' '); \r\n\r\n  return ( \r\n    <button \r\n      className={classes} \r\n      disabled={disabled || loading} \r\n      {...props} \r\n    > \r\n      {loading && ( \r\n        <span className=\"button-spinner\" /> \r\n      )} \r\n      <span className={`button-text ${loading ? 'is-loading' : ''}`}> \r\n        {children} \r\n      </span> \r\n    </button> \r\n  ); \r\n}; \r\n\r\nButton.displayName = 'Button';\r\n","// Component imports and type definitions\r\nimport { FC } from 'react'; \r\nimport { ErrorMessageInterface } from '@/types';\r\nimport './ErrorMessage.scss'; \r\n\r\n// Display error messages with consistent styling\r\nexport const ErrorMessage: FC<ErrorMessageInterface> = ({ \r\n  error, \r\n  title = 'Error', \r\n  className = '' \r\n}) => { \r\n  // Convert error to string message\r\n  const errorMessage = error instanceof Error ? error.message : error;\r\n\r\n  return ( \r\n    <div \r\n      className={`error-message ${className}`.trim()} \r\n      role=\"alert\" \r\n      aria-label={title} \r\n    > \r\n      <div className=\"error-message-title\"> \r\n        {title} \r\n      </div> \r\n      <div className=\"error-message-content\"> \r\n        {errorMessage} \r\n      </div> \r\n    </div> \r\n  ); \r\n}; \r\n\r\nErrorMessage.displayName = 'ErrorMessage';\r\n","// React and component imports\r\nimport { Component, ErrorInfo } from 'react'; \r\nimport { ErrorMessage } from '../ErrorMessage/ErrorMessage'; \r\nimport { ErrorBoundaryInterface, ErrorBoundaryStateInterface } from '@/types'; \r\n\r\n// Error boundary component to catch and handle component errors\r\nexport class ErrorBoundary extends Component<ErrorBoundaryInterface, ErrorBoundaryStateInterface> { \r\n  // Initialize error state\r\n  public state: ErrorBoundaryStateInterface = { \r\n    hasError: false, \r\n    error: null, \r\n    errorInfo: null \r\n  }; \r\n\r\n  // Update state when error occurs\r\n  public static getDerivedStateFromError(error: Error): ErrorBoundaryStateInterface { \r\n    return { \r\n      hasError: true, \r\n      error, \r\n      errorInfo: null \r\n    }; \r\n  } \r\n\r\n  // Log error and call error handler\r\n  public componentDidCatch(error: Error, errorInfo: ErrorInfo) { \r\n    console.error('Error caught by boundary:', error, errorInfo); \r\n    this.setState({ errorInfo }); \r\n    this.props.onError?.(error, errorInfo); \r\n  } \r\n\r\n  // Render error UI or children\r\n  public render() { \r\n    const { \r\n      fallback, \r\n      className = '', \r\n      children \r\n    } = this.props; \r\n\r\n    if (this.state.hasError) { \r\n      const errorComponent = ( \r\n        <div \r\n          className={`error-boundary ${className}`.trim()} \r\n          role=\"alert\" \r\n        > \r\n          <ErrorMessage \r\n            title=\"Component Error\" \r\n            error={this.state.error?.message || 'An unexpected error occurred'} \r\n          /> \r\n        </div> \r\n      ); \r\n\r\n      return fallback || errorComponent; \r\n    } \r\n\r\n    return children; \r\n  } \r\n}\r\n","// Component imports and type definitions\r\nimport { FC } from 'react'; \r\nimport { LoadingSpinnerInterface } from '@/types'; \r\nimport './LoadingSpinner.scss'; \r\n\r\n// Animated spinner component with size and color variants\r\nexport const LoadingSpinner: FC<LoadingSpinnerInterface> = ({ \r\n  size = 'md', \r\n  variant = 'primary', \r\n  className = '' \r\n}) => { \r\n  return ( \r\n    <div \r\n      className={`loading-spinner size-${size} variant-${variant} ${className}`.trim()} \r\n      role=\"progressbar\" \r\n      aria-label=\"Loading\" \r\n    > \r\n      <svg \r\n        xmlns=\"http://www.w3.org/2000/svg\" \r\n        viewBox=\"0 0 24 24\" \r\n        fill=\"none\" \r\n        stroke=\"currentColor\" \r\n        strokeWidth=\"2\" \r\n        strokeLinecap=\"round\" \r\n        strokeLinejoin=\"round\" \r\n        aria-hidden=\"true\"  \r\n      > \r\n        <circle cx=\"12\" cy=\"12\" r=\"10\" opacity=\"0.25\" /> \r\n        <path \r\n          d=\"M12 2a10 10 0 0 1 10 10\" \r\n          opacity=\"0.75\" \r\n        /> \r\n      </svg> \r\n    </div> \r\n  ); \r\n}; \r\n\r\nLoadingSpinner.displayName = 'LoadingSpinner';\r\n","// Component imports and type definitions\r\nimport { FC } from 'react'; \r\nimport { LoadingSpinner } from '../LoadingSpinner/LoadingSpinner'; \r\nimport { LoadingBackdropInterface } from '@/types'; \r\nimport './LoadingBackdrop.scss'; \r\n\r\n// Overlay component to show loading state with spinner\r\nexport const LoadingBackdrop: FC<LoadingBackdropInterface> = ({ \r\n  isLoading = false, \r\n  className = '', \r\n  loadingMessage = 'Loading, please wait...' \r\n}) => { \r\n  // Only render when loading is active\r\n  if (!isLoading) {return null;} \r\n\r\n  return ( \r\n    <div \r\n      className={`backdrop ${className}`.trim()} \r\n      role=\"alert\" \r\n      aria-label={loadingMessage} \r\n    > \r\n      <div className=\"backdrop-content\"> \r\n        <LoadingSpinner \r\n          size=\"lg\" \r\n          variant=\"primary\" \r\n        /> \r\n        <span className=\"sr-only\"> \r\n          {loadingMessage} \r\n        </span> \r\n      </div> \r\n      <div \r\n        className=\"backdrop-overlay\" \r\n        aria-hidden=\"true\" \r\n      /> \r\n    </div> \r\n  ); \r\n}; \r\n\r\nLoadingBackdrop.displayName = 'LoadingBackdrop';\r\n","// Component imports and type definitions\r\nimport { FC, useState, useRef, useEffect } from 'react'; \r\nimport { SelectInterface, SelectOptionType } from '@/types';\r\nimport './Select.scss'; \r\n\r\n// Custom select component with keyboard navigation and accessibility\r\nexport const Select: FC<SelectInterface> = ({ \r\n  options, \r\n  value, \r\n  onChange, \r\n  placeholder = 'Select an option', \r\n  size = 'md', \r\n  variant = 'outlined', \r\n  className = '', \r\n  disabled = false, \r\n  direction = 'down', \r\n  'aria-label': ariaLabel \r\n}) => { \r\n  // Refs for dropdown positioning and width measurement\r\n  const containerRef = useRef<HTMLDivElement>(null); \r\n  const measureRef = useRef<HTMLDivElement>(null); \r\n  const widthRef = useRef(40);\r\n\r\n  // State for dropdown visibility and keyboard navigation\r\n  const [isOpen, setIsOpen] = useState(false); \r\n  const [highlightedIndex, setHighlightedIndex] = useState(0); \r\n  const [width, setWidth] = useState<number | null>(null); \r\n\r\n  // Effects after all state declarations\r\n  // Calculate dropdown width based on option content\r\n  useEffect(() => {\r\n    // Width measurement\r\n    if (measureRef.current) {\r\n      let maxWidth = 40;\r\n      const measurer = measureRef.current;\r\n      \r\n      for (const option of options) {\r\n        measurer.textContent = option.label;\r\n        maxWidth = Math.max(maxWidth, measurer.offsetWidth + 40);\r\n      }\r\n      \r\n      widthRef.current = maxWidth;\r\n      setWidth(maxWidth);\r\n    }\r\n  }, [options]);\r\n\r\n  // Handle clicks outside the select component\r\n  useEffect(() => { \r\n    // Click outside handler\r\n    const handler = (event: MouseEvent) => {\r\n      if (containerRef.current && !containerRef.current.contains(event.target as Node)) { \r\n        setIsOpen(false); \r\n      }\r\n    };\r\n\r\n    document.addEventListener('mousedown', handler); \r\n    return () => document.removeEventListener('mousedown', handler); \r\n  }, []); \r\n\r\n  // Derived values after all hooks\r\n  const selectedOption = options.find(opt => opt.value === value); \r\n  const classes = [ \r\n    'select', \r\n    `select-${size}`, \r\n    `select-${variant}`, \r\n    isOpen && 'is-open', \r\n    disabled && 'is-disabled', \r\n    `select-${direction}`, \r\n    className \r\n  ].filter(Boolean).join(' '); \r\n\r\n  // Handle option selection and dropdown state\r\n  const handleOptionClick = (optionValue: string) => {\r\n    onChange(optionValue);\r\n    setIsOpen(false);\r\n  };\r\n\r\n  // Keyboard navigation and accessibility controls\r\n  const handleKeyDown = (e: React.KeyboardEvent) => { \r\n    if (disabled) return;\r\n\r\n    switch (e.key) { \r\n      case 'Enter': \r\n      case ' ': \r\n        e.preventDefault(); \r\n        if (isOpen) { \r\n          onChange(options[highlightedIndex].value); \r\n          setIsOpen(false); \r\n        } else { \r\n          setIsOpen(true); \r\n        } \r\n        break; \r\n\r\n      case 'ArrowUp': \r\n        e.preventDefault(); \r\n        if (!isOpen) { \r\n          setIsOpen(true); \r\n        } else { \r\n          setHighlightedIndex(Math.max(0, highlightedIndex - 1)); \r\n        } \r\n        break; \r\n\r\n      case 'ArrowDown': \r\n        e.preventDefault(); \r\n        if (!isOpen) { \r\n          setIsOpen(true); \r\n        } else { \r\n          setHighlightedIndex(Math.min(options.length - 1, highlightedIndex + 1)); \r\n        } \r\n        break; \r\n\r\n      case 'Escape': \r\n        if (isOpen) { \r\n          setIsOpen(false); \r\n        } \r\n        break; \r\n    } \r\n  }; \r\n\r\n  return ( \r\n    <div \r\n      ref={containerRef} \r\n      className={classes} \r\n      onKeyDown={handleKeyDown} \r\n      tabIndex={disabled ? -1 : 0} \r\n      role=\"combobox\"\r\n      aria-controls={`select-${options[0]?.value || 'options'}`}\r\n      aria-expanded={isOpen}\r\n      aria-haspopup=\"listbox\"\r\n      aria-activedescendant={isOpen ? `select-option-${highlightedIndex}` : undefined}\r\n      aria-label={ariaLabel || 'Select'} \r\n      style={{ width: width ? `${width}px` : undefined }} \r\n    > \r\n      <div \r\n        ref={measureRef} \r\n        style={{ \r\n          position: 'absolute', \r\n          visibility: 'hidden', \r\n          whiteSpace: 'nowrap', \r\n          fontFamily: 'inherit', \r\n          fontSize: 'inherit', \r\n          fontWeight: 'inherit' \r\n        }} \r\n      /> \r\n\r\n      <div \r\n        className=\"select-trigger\" \r\n        onClick={() => !disabled && setIsOpen(!isOpen)} \r\n      > \r\n        <span className=\"select-value\"> \r\n          {selectedOption ? selectedOption.label : placeholder} \r\n        </span> \r\n        <span className=\"select-arrow\" aria-hidden=\"true\" /> \r\n      </div> \r\n\r\n      {isOpen && !disabled && ( \r\n        <div \r\n          className=\"select-dropdown\" \r\n          role=\"listbox\"\r\n          id={`select-${options[0]?.value || 'options'}`}\r\n          data-direction={direction}\r\n        > \r\n          {options.map((option: SelectOptionType, index) => ( \r\n            <div \r\n              key={option.value} \r\n              className={[ \r\n                'select-option', \r\n                option.value === value && 'is-selected', \r\n                index === highlightedIndex && 'is-highlighted' \r\n              ].filter(Boolean).join(' ')} \r\n              onClick={() => handleOptionClick(option.value)} \r\n              role=\"option\"\r\n              id={`select-option-${index}`}\r\n              aria-selected={option.value === value} \r\n            > \r\n              {option.label} \r\n            </div> \r\n          ))} \r\n        </div> \r\n      )} \r\n    </div> \r\n  ); \r\n}; \r\n\r\nSelect.displayName = 'Select';\r\n","// Component imports and type definitions\r\nimport { FC, useEffect } from 'react'; \r\nimport { ToastProps } from '@/types'; \r\nimport './Toast.scss'; \r\n\r\n// Toast notification component with auto-dismiss\r\nexport const Toast: FC<ToastProps> = ({ \r\n  id, \r\n  message, \r\n  type, \r\n  onClose, \r\n  duration = 5000, \r\n  className = '' \r\n}) => { \r\n  // Setup auto-dismiss functionality\r\n  useEffect(() => { \r\n    const timer = setTimeout(() => onClose(id), duration); \r\n    return () => clearTimeout(timer); \r\n  }, [duration, onClose, id]); \r\n\r\n  // Combine class names based on type and props\r\n  const classes = [ \r\n    'toast', \r\n    `toast-${type}`, \r\n    className \r\n  ].filter(Boolean).join(' '); \r\n\r\n  return ( \r\n    <div \r\n      className={classes} \r\n      role={type === 'error' ? 'alert' : 'status'} \r\n    > \r\n      <div className=\"toast-content\"> \r\n        <div className=\"toast-message\"> \r\n          {message} \r\n        </div> \r\n      </div> \r\n    </div> \r\n  ); \r\n}; \r\n\r\nToast.displayName = 'Toast';\r\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'; \r\nimport { RootStoreInterface, AppDispatchType } from '@/types'; \r\n\r\n// Custom hooks with TypeScript support for Redux store\r\nexport const useAppDispatch = () => useDispatch<AppDispatchType>(); \r\nexport const useAppSelector: TypedUseSelectorHook<RootStoreInterface> = useSelector;\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'; \r\nimport { \r\n  HistoryItemInterface, \r\n  HistoryStoreType \r\n} from '@/types'; \r\n\r\n// Initialize empty history store\r\nconst initialState: HistoryStoreType = { \r\n  items: [], \r\n  recentItems: [], \r\n  maxItems: 100, \r\n  metadata: { \r\n    totalItems: 0, \r\n    avgExecutionTime: 0, \r\n  }, \r\n}; \r\n\r\n// Define history state updates\r\nconst historySlice = createSlice({ \r\n  name: 'history', \r\n  initialState, \r\n  reducers: { \r\n    addItem(state, action: PayloadAction<HistoryItemInterface>) { \r\n      const item = action.payload; \r\n      state.items.unshift(item); \r\n      \r\n      // Calculate history statistics\r\n      state.metadata.totalItems = state.items.length; \r\n      \r\n      if (item.executionTime) { \r\n        const totalExecutionTime = state.items.reduce((sum, item) => \r\n          sum + (item.executionTime || 0), 0 \r\n        ); \r\n        state.metadata.avgExecutionTime = totalExecutionTime / state.items.length; \r\n      } \r\n      \r\n      // Keep most recent queries for quick access\r\n      state.recentItems = state.items.slice(0, 5); \r\n      \r\n      // Limit total history size\r\n      if (state.items.length > state.maxItems) { \r\n        state.items.pop(); \r\n      } \r\n    }, \r\n\r\n    // Reset history to initial state\r\n    clearHistory() { \r\n      return initialState; \r\n    } \r\n  } \r\n}); \r\n\r\n// Export history reducers\r\nexport const { \r\n  addItem, \r\n  clearHistory \r\n} = historySlice.actions; \r\n\r\n// Get history data from store\r\nexport const selectHistoryState = (state: { history: HistoryStoreType }) => state.history; \r\n// Get all history entries\r\nexport const selectHistoryItems = (state: { history: HistoryStoreType }) => state.history.items;\r\n// Get history statistics\r\nexport const selectHistoryMetadata = (state: { history: HistoryStoreType }) => state.history.metadata;\r\n// Get latest history entries\r\nexport const selectRecentHistoryItems = (state: { history: HistoryStoreType }) => state.history.recentItems;\r\n\r\nexport default historySlice.reducer;\r\n","import { createSlice, createSelector, PayloadAction } from '@reduxjs/toolkit'; \r\nimport { columnDefinitions } from '@/data/mockData'; \r\nimport { \r\n  CompanyRecordInterface, \r\n  ColumnDefinitionInterface, \r\n  ResultsMetadataInterface, \r\n  ResultsStoreType, \r\n  ResultsDataInterface \r\n} from '@/types'; \r\n\r\n// Initialize empty results store\r\nconst initialState: ResultsStoreType = { \r\n  data: null, \r\n  status: 'idle', \r\n  error: null, \r\n  metadata: { \r\n    totalRows: 0, \r\n    executionTime: 0 \r\n  } \r\n}; \r\n\r\n// Define results state updates\r\nconst resultsSlice = createSlice({ \r\n  name: 'results', \r\n  initialState, \r\n  reducers: { \r\n    // Store query execution results\r\n    setResults(state, action: PayloadAction<ResultsDataInterface>) { \r\n      state.data = { \r\n        ...action.payload, \r\n        columns: columnDefinitions  // Use column definitions with labels \r\n      }; \r\n      state.status = 'success'; \r\n      state.error = null; \r\n    }, \r\n    \r\n    // Set loading state during execution\r\n    setLoading(state) { \r\n      state.status = 'loading'; \r\n      state.error = null; \r\n    }, \r\n    \r\n    // Store execution error message\r\n    setError(state, action: PayloadAction<string>) { \r\n      state.status = 'error'; \r\n      state.error = action.payload; \r\n    }, \r\n\r\n    // Update execution statistics\r\n    updateMetadata(state, action: PayloadAction<Partial<ResultsMetadataInterface>>) { \r\n      state.metadata = { \r\n        ...state.metadata, \r\n        ...action.payload \r\n      }; \r\n    }, \r\n\r\n    // Reset results state\r\n    clearResults() { \r\n      return initialState; \r\n    } \r\n  } \r\n}); \r\n\r\n// Export results reducers\r\nexport const { \r\n  setResults, \r\n  setLoading, \r\n  setError, \r\n  updateMetadata, \r\n  clearResults \r\n} = resultsSlice.actions; \r\n\r\n// Get results data from store\r\nexport const selectResultsState = (state: { results: ResultsStoreType }) => state.results; \r\n \r\n// Get query result records\r\nexport const selectResultsData = createSelector( \r\n  [selectResultsState], \r\n  (state): CompanyRecordInterface[] | null => state.data?.results || null \r\n); \r\n\r\n// Get result column definitions\r\nexport const selectResultsColumns = createSelector( \r\n  [selectResultsState], \r\n  (): ColumnDefinitionInterface[] => columnDefinitions \r\n); \r\n\r\n// Get current execution status\r\nexport const selectResultsStatus = createSelector( \r\n  [selectResultsState], \r\n  (state) => state.status \r\n); \r\n\r\n// Get execution error if any\r\nexport const selectResultsError = createSelector( \r\n  [selectResultsState], \r\n  (state) => state.error \r\n); \r\n\r\n// Get execution statistics\r\nexport const selectResultsMetadata = createSelector( \r\n  [selectResultsState], \r\n  (state) => state.metadata \r\n); \r\n\r\nexport default resultsSlice.reducer;\r\n","import { v4 as uuid } from 'uuid'; \r\n\r\n// Generate unique identifier using UUID v4\r\nexport const generateId = (): string => { \r\n  return uuid(); \r\n};\r\n","import { saveAs } from 'file-saver'; \r\nimport { utils as XLSXUtils, write as writeXLSX } from 'xlsx'; \r\nimport { \r\n  CompanyRecordInterface, \r\n  ColumnDefinitionInterface, \r\n  ExportFormatType \r\n} from '@/types'; \r\n\r\n// Convert any value to safe string format\r\nconst formatValue = (value: string | number | boolean | null | undefined): string => { \r\n  if (value === null || value === undefined) {return '';} \r\n  return String(value); \r\n}; \r\n\r\n// Export data to CSV format\r\nconst exportAsCSV = ( \r\n  data: CompanyRecordInterface[], \r\n  columns: ColumnDefinitionInterface[] \r\n): void => { \r\n  // Build CSV header from column labels\r\n  const csvHeader = columns.map(col => `\"${col.label}\"`).join(','); \r\n\r\n  // Convert records to CSV format\r\n  const csvRows = data.map(row => \r\n    columns \r\n      .map(col => `\"${formatValue(row[col.name])}\"`) \r\n      .join(',') \r\n  ); \r\n\r\n  // Join CSV rows into single string\r\n  const csvContent = [csvHeader, ...csvRows].join('\\n'); \r\n\r\n  // Create downloadable CSV file\r\n  const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8' }); \r\n  saveAs(blob, `query-results-${new Date().toISOString()}.csv`); \r\n}; \r\n\r\n// Export data to Excel format\r\nconst exportAsExcel = ( \r\n  data: CompanyRecordInterface[], \r\n  columns: ColumnDefinitionInterface[] \r\n): void => { \r\n  // Extract column headers\r\n  const headers = columns.map(col => col.label); \r\n  \r\n  // Convert records to array format\r\n  const rows = data.map(row => \r\n    columns.map(col => row[col.name]) \r\n  ); \r\n\r\n  // Generate Excel worksheet\r\n  const worksheet = XLSXUtils.aoa_to_sheet([headers, ...rows]); \r\n  \r\n  // Create Excel workbook with data\r\n  const workbook = XLSXUtils.book_new(); \r\n  XLSXUtils.book_append_sheet(workbook, worksheet, 'Results'); \r\n\r\n  // Convert workbook to buffer\r\n  const excelBuffer = writeXLSX(workbook, { bookType: 'xlsx', type: 'array' }); \r\n  \r\n  // Create downloadable Excel file\r\n  const blob = new Blob([excelBuffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' }); \r\n  saveAs(blob, `query-results-${new Date().toISOString()}.xlsx`); \r\n}; \r\n\r\n// Export data to JSON format\r\nconst exportAsJSON = (data: CompanyRecordInterface[]): void => { \r\n  const jsonContent = JSON.stringify(data, null, 2); \r\n  const blob = new Blob([jsonContent], { type: 'application/json' }); \r\n  saveAs(blob, `query-results-${new Date().toISOString()}.json`); \r\n}; \r\n\r\n// Export results in selected format\r\nexport const exportResultsData = ( \r\n  format: ExportFormatType, \r\n  data: CompanyRecordInterface[], \r\n  columns: ColumnDefinitionInterface[] \r\n): void => { \r\n  if (!data?.length) {return;} \r\n\r\n  switch (format) { \r\n    case 'csv': \r\n      exportAsCSV(data, columns); \r\n      break; \r\n    case 'xlsx': \r\n      exportAsExcel(data, columns); \r\n      break; \r\n    case 'json': \r\n      exportAsJSON(data); \r\n      break; \r\n  } \r\n};\r\n","import { \r\n  ReportHandlerType, \r\n  CLSMetricInterface, \r\n  FIDMetricInterface, \r\n  FCPMetricInterface, \r\n  LCPMetricInterface, \r\n  TTFBMetricInterface, \r\n  BenchmarksInterface, \r\n  MetricKeyType, \r\n  MetricRatingType, \r\n  ColorCodesInterface, \r\n  MetricRowDataInterface \r\n} from '@/types'; \r\n\r\n// Performance metric thresholds\r\nconst benchmarks: BenchmarksInterface = { \r\n  CLS: { good: 0.1, needsImprovement: 0.25, label: 'Cumulative Layout Shift' }, \r\n  FID: { good: 100, needsImprovement: 300, label: 'First Input Delay' }, \r\n  FCP: { good: 1800, needsImprovement: 3000, label: 'First Contentful Paint' }, \r\n  LCP: { good: 2500, needsImprovement: 4000, label: 'Largest Contentful Paint' }, \r\n  TTFB: { good: 800, needsImprovement: 1800, label: 'Time to First Byte' } \r\n}; \r\n\r\n// Calculate metric rating based on value\r\nconst getRating = (metric: MetricKeyType, value: number): MetricRatingType => { \r\n  const benchmark = benchmarks[metric]; \r\n  if (value <= benchmark.good) { \r\n    return ['Good', '#4caf50']; \r\n  } else if (value <= benchmark.needsImprovement) { \r\n    return ['Needs Improvement', '#ff9800']; \r\n  } else { \r\n    return ['Poor', '#f44336']; \r\n  } \r\n}; \r\n\r\n// Convert metric value to readable format\r\nconst formatValueWithUnit = (metric: MetricKeyType, value: number): string => { \r\n  switch (metric) { \r\n    case 'CLS': \r\n      return value.toFixed(3); \r\n    case 'FID': \r\n    case 'FCP': \r\n    case 'LCP': \r\n    case 'TTFB': \r\n      return value >= 1000 \r\n        ? `${(value / 1000).toFixed(2)}s` \r\n        : `${value.toFixed(0)}ms`; \r\n    default: \r\n      return value.toFixed(2); \r\n  } \r\n}; \r\n\r\n// Clean up console color codes\r\nconst stripAnsi = (str: string) => str.replace(/\\[\\d+m|\\[\\d+;\\d+m/g, ''); \r\n\r\n// Display formatted metric data in console\r\nconst printMetricTable = (metric: MetricKeyType, value: number): void => { \r\n  const benchmark = benchmarks[metric]; \r\n  const [rating, hexColor] = getRating(metric, value); \r\n\r\n  const threshold = benchmark.good; \r\n  const diff = value - threshold; \r\n\r\n  const rawValue = formatValueWithUnit(metric, value); \r\n  const rawThreshold = formatValueWithUnit(metric, threshold); \r\n  const rawDiff = formatValueWithUnit(metric, diff); \r\n\r\n  // Console output color mapping\r\n  const colorCodes: ColorCodesInterface = { \r\n    '#4caf50': '[32m', \r\n    '#ff9800': '[33m', \r\n    '#f44336': '[31m', \r\n    reset: '[0m' \r\n  }; \r\n\r\n  const color = colorCodes[hexColor] || ''; \r\n  const {reset} = colorCodes; \r\n\r\n  const coloredValue = `${color}${rawValue}${reset}`; \r\n  const coloredStatus = `${color}${rating}${reset}`; \r\n  const coloredDiff = `${color}${rawDiff}${reset}`; \r\n\r\n  // Format row data for table\r\n  const row: MetricRowDataInterface = { \r\n    Metric: metric, \r\n    Value: stripAnsi(coloredValue), \r\n    Threshold: rawThreshold, \r\n    Difference: stripAnsi(coloredDiff), \r\n    Status: stripAnsi(coloredStatus) \r\n  }; \r\n\r\n  // Determine column widths\r\n  const headers = Object.keys(row); \r\n  const widths = headers.map((h) => Math.max(h.length, row[h as keyof typeof row].length)); \r\n\r\n  // Pad cells to match column width\r\n  const formatCell = (str: string, width: number) => \r\n    str + ' '.repeat(width - stripAnsi(str).length); \r\n\r\n  // Generate table structure\r\n  const headerRow = `│ ${headers.map((h, i) => formatCell(h, widths[i])).join(' │ ')} │`; \r\n  const separator = `├${widths.map(w => '─'.repeat(w + 2)).join('┼')}┤`; \r\n  const dataRow = `│ ${[ \r\n    formatCell(metric, widths[0]), \r\n    formatCell(coloredValue, widths[1]), \r\n    formatCell(rawThreshold, widths[2]), \r\n    formatCell(coloredDiff, widths[3]), \r\n    formatCell(coloredStatus, widths[4]) \r\n  ].join(' │ ')} │`; \r\n  const borderTop = `┌${widths.map(w => '─'.repeat(w + 2)).join('┬')}┐`; \r\n  const borderBottom = `└${widths.map(w => '─'.repeat(w + 2)).join('┴')}┘`; \r\n\r\n  // Output metric table\r\n  const label = benchmark.label || metric; \r\n  console.group(`Web Vital: ${label} (${metric})`); \r\n  console.log([borderTop, headerRow, separator, dataRow, borderBottom].join('\\n')); \r\n  console.groupEnd(); \r\n}; \r\n\r\n// Initialize web vitals monitoring\r\nexport const reportWebVitals = (onPerfEntry?: ReportHandlerType): void => { \r\n  if (onPerfEntry && onPerfEntry instanceof Function) { \r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => { \r\n      getCLS((metric: CLSMetricInterface) => { \r\n        printMetricTable('CLS', metric.value); \r\n        // onPerfEntry(metric); \r\n      }); \r\n\r\n      getFID((metric: FIDMetricInterface) => { \r\n        printMetricTable('FID', metric.value); \r\n        // onPerfEntry(metric); \r\n      }); \r\n\r\n      getFCP((metric: FCPMetricInterface) => { \r\n        printMetricTable('FCP', metric.value); \r\n        // onPerfEntry(metric); \r\n      }); \r\n\r\n      getLCP((metric: LCPMetricInterface) => { \r\n        printMetricTable('LCP', metric.value); \r\n        // onPerfEntry(metric); \r\n      }); \r\n\r\n      getTTFB((metric: TTFBMetricInterface) => { \r\n        printMetricTable('TTFB', metric.value); \r\n        // onPerfEntry(metric); \r\n      }); \r\n    }); \r\n  } \r\n};\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'; \r\nimport { AppThunkType } from '@/types'; \r\nimport { \r\n  setLoading, \r\n  setResults, \r\n  setError, \r\n  updateMetadata \r\n} from './resultsSlice'; \r\nimport { addItem } from './historySlice'; \r\nimport { generateId } from '@/utils'; \r\n\r\nimport { \r\n  QueryLanguageType, \r\n  QueryStoreType, \r\n  ResultsDataInterface, \r\n  ColumnDefinitionInterface, \r\n  HistoryItemInterface \r\n} from '@/types'; \r\n\r\n// Initial query editor configuration\r\nconst initialState: QueryStoreType = { \r\n  text: '', \r\n  isValid: false, \r\n  isDirty: false, \r\n  language: 'sql', \r\n  lastQuery: '' \r\n}; \r\n\r\n// Define query state updates\r\nconst querySlice = createSlice({ \r\n  name: 'query', \r\n  initialState, \r\n  reducers: { \r\n    // Update query editor content\r\n    setQuery(state, action: PayloadAction<string>) { \r\n      state.text = action.payload; \r\n      state.isDirty = true; \r\n    }, \r\n    \r\n    // Update syntax validation status\r\n    setValidity(state, action: PayloadAction<boolean>) { \r\n      state.isValid = action.payload; \r\n    }, \r\n\r\n    // Change SQL dialect type\r\n    setLanguage(state, action: PayloadAction<QueryLanguageType>) { \r\n      state.language = action.payload; \r\n    }, \r\n\r\n    // Save query as last executed\r\n    resetDirty(state) { \r\n      state.isDirty = false; \r\n      state.lastQuery = state.text; \r\n    }, \r\n\r\n    // Clear query editor state\r\n    resetQuery() { \r\n      return initialState; \r\n    } \r\n  } \r\n}); \r\n\r\n// Export query reducers\r\nexport const { \r\n  setQuery, \r\n  setValidity, \r\n  setLanguage, \r\n  resetDirty, \r\n  resetQuery \r\n} = querySlice.actions; \r\n\r\n// Async query execution\r\nexport const executeQuery = (): AppThunkType => \r\n  async (dispatch, getState) => { \r\n    const state = getState(); \r\n    const { text, isValid } = state.query; \r\n    \r\n    if (!text.trim() || !isValid) {return;} \r\n    \r\n    try { \r\n      dispatch(resetDirty()); \r\n      dispatch(setLoading()); \r\n\r\n      // Add artificial delay for demo\r\n      await new Promise(resolve => setTimeout(resolve, 1000)); \r\n      \r\n      // Extract target company from query\r\n      const match = text.match(/select \\* from (\\w+)/i); \r\n      if (!match) { \r\n        throw new Error('Invalid query format. Expected: select * from companyName'); \r\n      } \r\n      \r\n      const companyName = match[1].toLowerCase(); \r\n\r\n      // Load sample data for query\r\n      const { mockData } = await import('@/data/mockData'); \r\n      \r\n      // Filter results based on company name\r\n      // For other companies, filter the results \r\n      const filteredResults = companyName === 'pega' \r\n        ? mockData \r\n        : mockData.filter(record => record.company === companyName); \r\n\r\n      if (filteredResults.length === 0) { \r\n        throw new Error(`No records found for company: ${companyName}`); \r\n      } \r\n      \r\n      // Configure result columns structure\r\n      const columns: ColumnDefinitionInterface[] = Object.entries(filteredResults[0]).map(([key, value]) => ({ \r\n        name: key, \r\n        label: key.charAt(0).toUpperCase() + key.slice(1), // Capitalize first letter \r\n        size: 150, // Default size \r\n        type: typeof value === 'number' ? 'number' : \r\n              typeof value === 'boolean' ? 'boolean' : \r\n              typeof value === 'string' && /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/.test(value) ? 'datetime' : \r\n              'string' \r\n      })); \r\n\r\n      // Save query execution results\r\n      const resultsData: ResultsDataInterface = { \r\n        results: filteredResults, \r\n        columns, \r\n        timestamp: Date.now() \r\n      }; \r\n      dispatch(setResults(resultsData)); \r\n\r\n      dispatch(updateMetadata({ \r\n        totalRows: filteredResults.length, \r\n        executionTime: 1 \r\n      })); \r\n\r\n      // Record successful query execution\r\n      const executionTime = 1; \r\n      const historyItem: Omit<HistoryItemInterface, 'id'> = { \r\n        text, \r\n        timestamp: Date.now(), \r\n        language: state.query.language, \r\n        executionTime, \r\n        rowCount: filteredResults.length \r\n      }; \r\n      dispatch(addItem({ ...historyItem, id: generateId() })); \r\n\r\n    } catch (error) { \r\n      dispatch(setError(error instanceof Error ? error.message : 'An error occurred')); \r\n    } \r\n  }; \r\n\r\n// Get query state from store\r\nexport const selectQueryState = (state: { query: QueryStoreType }) => state.query; \r\n// Get editor content\r\nexport const selectQueryText = (state: { query: QueryStoreType }) => state.query.text;\r\n// Get syntax validation status\r\nexport const selectQueryValidity = (state: { query: QueryStoreType }) => state.query.isValid;\r\n// Get selected SQL dialect\r\nexport const selectQueryLanguage = (state: { query: QueryStoreType }) => state.query.language;\r\n// Get modified status\r\nexport const selectQueryDirty = (state: { query: QueryStoreType }) => state.query.isDirty;\r\n// Get previously executed query\r\nexport const selectLastQuery = (state: { query: QueryStoreType }) => state.query.lastQuery;\r\n\r\nexport default querySlice.reducer;\r\n","import { createSlice, PayloadAction, createSelector } from '@reduxjs/toolkit'; \r\nimport { generateId } from '@/utils'; \r\nimport { \r\n  ToastVariantType, \r\n  ToastItemInterface, \r\n  ToastStatsInterface, \r\n  ToastsStoreType, \r\n  StateWithToast \r\n} from '@/types'; \r\n\r\n// Initialize notification system state\r\nconst initialState: ToastsStoreType = { \r\n  items: [], \r\n  limit: 5, \r\n  stats: { \r\n    total: 0, \r\n    byType: { \r\n      success: 0, \r\n      error: 0, \r\n      warning: 0, \r\n      info: 0 \r\n    } \r\n  } \r\n}; \r\n\r\n// Define notification state updates\r\nconst toastSlice = createSlice({ \r\n  name: 'toast', \r\n  initialState, \r\n  reducers: { \r\n    // Display new notification message\r\n    addToast: (state, action: PayloadAction<Omit<ToastItemInterface, 'id'>>) => { \r\n      const toast: ToastItemInterface = { \r\n        ...action.payload, \r\n        id: generateId() \r\n      }; \r\n      state.items.push(toast); \r\n      \r\n      // Update notification statistics\r\n      state.stats.total++; \r\n      state.stats.byType[toast.type]++; \r\n      \r\n      // Remove old notifications when limit reached\r\n      if (state.items.length > state.limit) { \r\n        const removed = state.items.shift(); \r\n        if (removed) { \r\n          state.stats.total--; \r\n          state.stats.byType[removed.type]--; \r\n        } \r\n      } \r\n    }, \r\n\r\n    // Remove single notification\r\n    removeToast: (state, action: PayloadAction<string>) => { \r\n      const removed = state.items.find(toast => toast.id === action.payload); \r\n      if (removed) { \r\n        state.items = state.items.filter(toast => toast.id !== action.payload); \r\n        state.stats.total--; \r\n        state.stats.byType[removed.type]--; \r\n      } \r\n    }, \r\n\r\n    // Remove all notifications\r\n    clearToasts: (state) => { \r\n      state.items = []; \r\n      state.stats = { \r\n        total: 0, \r\n        byType: { \r\n          success: 0, \r\n          error: 0, \r\n          warning: 0, \r\n          info: 0 \r\n        } \r\n      }; \r\n    } \r\n  } \r\n}); \r\n\r\n// Export notification reducers\r\nexport const { \r\n  addToast, \r\n  removeToast, \r\n  clearToasts \r\n} = toastSlice.actions; \r\n\r\n// Get notification data from store\r\nexport const selectAllToasts = (state: StateWithToast) => \r\n  state.toast.items; \r\n\r\n// Get subset of recent notifications\r\nexport const selectLimitedToasts = createSelector( \r\n  [ \r\n    (state: StateWithToast) => state.toast.items, \r\n    (_state: StateWithToast, limit: number) => limit \r\n  ], \r\n  (toasts, limit) => toasts.slice(-limit) \r\n); \r\n\r\n// Get most recent notification\r\nexport const selectLatestToast = createSelector( \r\n  [selectAllToasts], \r\n  (toasts): ToastItemInterface | null => toasts[toasts.length - 1] || null \r\n); \r\n\r\n// Group notifications by type\r\nexport const selectToastsByType = createSelector( \r\n  [selectAllToasts], \r\n  (toasts): Record<ToastVariantType, ToastItemInterface[]> => \r\n    toasts.reduce((acc, toast) => { \r\n      acc[toast.type] = acc[toast.type] || []; \r\n      acc[toast.type].push(toast); \r\n      return acc; \r\n    }, {} as Record<ToastVariantType, ToastItemInterface[]>) \r\n); \r\n\r\n// Get notification counts by type\r\nexport const selectToastStats = createSelector( \r\n  [selectAllToasts], \r\n  (toasts): ToastStatsInterface => ({ \r\n    total: toasts.length, \r\n    byType: { \r\n      success: toasts.filter(t => t.type === 'success').length, \r\n      error: toasts.filter(t => t.type === 'error').length, \r\n      warning: toasts.filter(t => t.type === 'warning').length, \r\n      info: toasts.filter(t => t.type === 'info').length \r\n    } \r\n  }) \r\n); \r\n\r\nexport default toastSlice.reducer;\r\n","import { useCallback } from 'react'; \r\nimport { useAppDispatch, useAppSelector } from '@/store/hooks'; \r\nimport { \r\n  selectQueryText, \r\n  selectQueryValidity, \r\n  selectQueryDirty, \r\n  selectQueryLanguage, \r\n  selectLastQuery, \r\n  setQuery, \r\n  setValidity, \r\n  setLanguage, \r\n  resetDirty, \r\n  executeQuery as executeQueryAction \r\n} from '@/store/slices'; \r\nimport { addToast } from '@/store/slices'; \r\nimport { UseQueryReturnInterface, QueryLanguageType } from '@/types'; \r\n\r\nexport const useQuery = (): UseQueryReturnInterface => { \r\n  // Get query state from store\r\n  const text = useAppSelector(selectQueryText); \r\n  const isValid = useAppSelector(selectQueryValidity); \r\n  const isDirty = useAppSelector(selectQueryDirty); \r\n  const language = useAppSelector(selectQueryLanguage); \r\n  const lastQuery = useAppSelector(selectLastQuery); \r\n  const dispatch = useAppDispatch(); \r\n\r\n  // Update editor content and state\r\n  const handleSetText = useCallback((value: string) => { \r\n    dispatch(setQuery(value)); \r\n  }, [dispatch]); \r\n\r\n  // Set syntax validation status\r\n  const handleSetValidity = useCallback((value: boolean) => { \r\n    dispatch(setValidity(value)); \r\n  }, [dispatch]); \r\n\r\n  // Reset modified state after save\r\n  const handleResetDirty = useCallback(() => { \r\n    dispatch(resetDirty()); \r\n  }, [dispatch]); \r\n\r\n  // Update SQL dialect selection\r\n  const handleSetLanguage = useCallback((value: QueryLanguageType) => { \r\n    dispatch(setLanguage(value)); \r\n  }, [dispatch]); \r\n\r\n  // Query execution and loading handlers\r\n  const handleExecuteQuery = useCallback(async () => { \r\n    if (!text.trim() || !isValid) {return;} \r\n\r\n    // Prevent duplicate query execution\r\n    if (text.trim() === lastQuery.trim()) { \r\n      dispatch(addToast({ \r\n        type: 'warning', \r\n        message: 'This query was just executed. Results are unchanged.', \r\n        duration: 3000 \r\n      })); \r\n      return; \r\n    } \r\n\r\n    await dispatch(executeQueryAction()); \r\n  }, [dispatch, text, isValid, lastQuery]); \r\n\r\n  const handleLoadQuery = useCallback(async (queryText: string) => { \r\n    // Prevent loading duplicate query\r\n    if (text === queryText) { \r\n      dispatch(addToast({ \r\n        type: 'warning', \r\n        message: 'This query is already in the editor.', \r\n        duration: 3000 \r\n      })); \r\n      return; \r\n    } \r\n\r\n    // Prevent rerunning same query\r\n    if (queryText === lastQuery) { \r\n      dispatch(addToast({ \r\n        type: 'warning', \r\n        message: 'This query matches the most recent execution. Results are unchanged.', \r\n        duration: 3000 \r\n      })); \r\n      return; \r\n    } \r\n\r\n    handleSetText(queryText); \r\n    handleSetValidity(true); // Mark loaded queries as valid \r\n    await dispatch(executeQueryAction()); \r\n  }, [handleSetText, handleSetValidity, text, lastQuery, dispatch]); \r\n\r\n  return { \r\n    // Editor content and status\r\n    text, \r\n    isValid, \r\n    isDirty, \r\n    language, \r\n    lastQuery, \r\n\r\n    // Query editing and execution methods\r\n    setText: handleSetText, \r\n    setValidity: handleSetValidity, \r\n    resetDirty: handleResetDirty, \r\n    setLanguage: handleSetLanguage, \r\n    executeQuery: handleExecuteQuery, \r\n    loadQuery: handleLoadQuery \r\n  }; \r\n};\r\n","import { useAppSelector, useAppDispatch } from '@/store/hooks'; \r\nimport { \r\n  selectResultsData, \r\n  selectResultsColumns, \r\n  selectResultsStatus, \r\n  selectResultsError, \r\n  selectResultsMetadata, \r\n  setResults as setResultsAction, \r\n  clearResults as clearResultsAction \r\n} from '@/store/slices'; \r\nimport { exportResultsData } from '@/utils'; \r\nimport { \r\n  UseResultsReturnInterface, \r\n  ResultsDataInterface, \r\n  ExportFormatType \r\n} from '@/types'; \r\n\r\nexport const useResults = (): UseResultsReturnInterface => { \r\n  // Get query results state from store\r\n  const results = useAppSelector(selectResultsData); \r\n  const columns = useAppSelector(selectResultsColumns); \r\n  const status = useAppSelector(selectResultsStatus); \r\n  const error = useAppSelector(selectResultsError); \r\n  const metadata = useAppSelector(selectResultsMetadata); \r\n  const dispatch = useAppDispatch(); \r\n\r\n  // Update results in store\r\n  const setResults = (data: ResultsDataInterface) => { \r\n    dispatch(setResultsAction(data)); \r\n  }; \r\n\r\n  // Reset query results state\r\n  const clearResults = () => { \r\n    dispatch(clearResultsAction()); \r\n  }; \r\n\r\n  // Export results to file in selected format\r\n  const exportData = (format: ExportFormatType) => { \r\n    if (results && columns) { \r\n      exportResultsData(format, results, columns); \r\n    } \r\n  }; \r\n\r\n  return { \r\n    // Results grid data and state\r\n    results, \r\n    columns, \r\n    status, \r\n    error, \r\n    metadata, \r\n\r\n    // Results manipulation methods\r\n    setResults, \r\n    clearResults, \r\n    exportData \r\n  }; \r\n};\r\n","// Component imports and type definitions\r\nimport { FC, memo, useCallback } from 'react'; \r\nimport { ErrorBoundary, LoadingBackdrop } from '@/components/common'; \r\nimport { useHistory, useQuery, useResults } from '@/hooks'; \r\nimport { \r\n  HistoryItemInterface, \r\n  HistoryInterface, \r\n  HistoryKeyNavigationHandler, \r\n  HistoryItemClickHandler \r\n} from '@/types'; \r\nimport './History.scss'; \r\n\r\n// Main history content component with memo for performance\r\nconst HistoryContent: FC<HistoryInterface> = memo(({ \r\n  className = '' \r\n}) => { \r\n  // Initialize hooks for history, query and results state\r\n  const { \r\n    items, \r\n    metadata \r\n  } = useHistory(); \r\n\r\n  const { text, loadQuery } = useQuery(); \r\n  const { status } = useResults(); \r\n\r\n  // Define loading state based on query execution status\r\n  const isLoading = status === 'loading'; \r\n\r\n  // Handle keyboard navigation between history items\r\n  const handleKeyNavigation: HistoryKeyNavigationHandler = useCallback((e: React.KeyboardEvent, index: number) => { \r\n    const historyItems = document.querySelectorAll('.history-item'); \r\n    \r\n    let nextIndex = -1; \r\n    switch (e.key) { \r\n      case 'ArrowDown': \r\n        e.preventDefault(); \r\n        nextIndex = index < items.length - 1 ? index + 1 : -1; \r\n        break; \r\n      case 'ArrowUp': \r\n        e.preventDefault(); \r\n        nextIndex = index > 0 ? index - 1 : -1; \r\n        break; \r\n    } \r\n\r\n    if (nextIndex !== -1) { \r\n      const targetElement = historyItems[nextIndex] as HTMLElement; \r\n      targetElement?.focus(); \r\n    } \r\n  }, [items.length]); \r\n\r\n  // Load selected query into editor\r\n  const handleItemClick: HistoryItemClickHandler = useCallback((entry: HistoryItemInterface) => {\r\n      loadQuery(entry.text); \r\n  }, [loadQuery]); \r\n\r\n  // Render history component structure\r\n  return ( \r\n    <div \r\n      id=\"history\" \r\n      className={`history ${className}`.trim()} \r\n      role=\"complementary\" \r\n      aria-label=\"Query History\" \r\n    > \r\n      <h2 className=\"history-header\" id=\"history-title\"> \r\n        Query History {metadata.totalItems > 0 && `(${metadata.totalItems})`} \r\n      </h2> \r\n      <div \r\n        className=\"history-list\" \r\n        role=\"list\" \r\n        aria-labelledby=\"history-title\" \r\n      > \r\n        {items.length === 0 ? ( \r\n          <div className=\"history-empty\" role=\"alert\"> \r\n            No queries executed yet \r\n          </div> \r\n        ) : ( \r\n          items.map((entry: HistoryItemInterface, index: number) => ( \r\n            <div \r\n              key={entry.id} \r\n              className={`history-item ${entry.executionTime ? 'is-success' : ''} ${index === 0 ? 'is-latest' : ''}`} \r\n              onClick={() => handleItemClick(entry)} \r\n              onKeyDown={(e) => { \r\n                handleKeyNavigation(e, index); \r\n                if (e.key === 'Enter' || e.key === ' ') { \r\n                  e.preventDefault(); \r\n                  handleItemClick(entry); \r\n                } \r\n              }} \r\n              role=\"button\" \r\n              tabIndex={0} \r\n              aria-label={`${index === 0 ? 'Latest query' : 'Previous query'}: ${entry.text}`} \r\n              aria-current={index === 0 ? 'true' : undefined} \r\n              aria-disabled={entry.text === text} \r\n            > \r\n              <div className=\"history-item-header\"> \r\n                <div className=\"history-item-time\"> \r\n                  {new Date(entry.timestamp).toLocaleTimeString()} \r\n                </div> \r\n                {entry.rowCount !== undefined && ( \r\n                  <div className=\"history-item-rows\"> \r\n                    {entry.rowCount.toLocaleString()} rows \r\n                  </div> \r\n                )} \r\n                {entry.executionTime !== undefined && ( \r\n                  <div className=\"history-item-duration\"> \r\n                    {Math.round(entry.executionTime)}ms \r\n                  </div> \r\n                )} \r\n              </div> \r\n              <div className=\"history-item-query\"> \r\n                {entry.text} \r\n              </div> \r\n            </div> \r\n          )) \r\n        )} \r\n      </div> \r\n\r\n      {isLoading && <LoadingBackdrop isLoading />} \r\n    </div> \r\n  ); \r\n}); \r\n\r\nHistoryContent.displayName = 'HistoryContent'; \r\n\r\n// Wrapper component with error boundary\r\nexport const History: FC<HistoryInterface> = props => {\r\n  return ( \r\n    <ErrorBoundary \r\n      onError={(error: Error) => { \r\n        console.error('History Error:', error); \r\n      }} \r\n    > \r\n      <HistoryContent {...props} /> \r\n    </ErrorBoundary> \r\n  ); \r\n}; \r\n\r\nHistory.displayName = 'History';\r\n","import { useCallback } from 'react'; \r\nimport { useAppDispatch, useAppSelector } from '@/store/hooks'; \r\nimport { \r\n  selectHistoryItems, \r\n  selectHistoryMetadata, \r\n  selectRecentHistoryItems, \r\n  addItem, \r\n  clearHistory, \r\n  selectQueryText, \r\n  selectQueryLanguage \r\n} from '@/store/slices'; \r\nimport { generateId } from '@/utils'; \r\n\r\nimport { \r\n  UseHistoryReturnInterface, \r\n  HistoryExecutionDataInterface, \r\n  HistoryItemInterface \r\n} from '@/types'; \r\n\r\nexport const useHistory = (): UseHistoryReturnInterface => { \r\n  // Get query history and current editor state\r\n  const items = useAppSelector(selectHistoryItems); \r\n  const metadata = useAppSelector(selectHistoryMetadata); \r\n  const recentItems = useAppSelector(selectRecentHistoryItems); \r\n  const currentText = useAppSelector(selectQueryText); \r\n  const currentLanguage = useAppSelector(selectQueryLanguage); \r\n  const dispatch = useAppDispatch(); \r\n\r\n  // Create new history entry with execution data\r\n  const handleAddToHistory = useCallback((executionData: HistoryExecutionDataInterface) => { \r\n    const historyItem: HistoryItemInterface = { \r\n      id: generateId(), \r\n      text: currentText, \r\n      timestamp: Date.now(), \r\n      language: currentLanguage, \r\n      ...executionData \r\n    }; \r\n    dispatch(addItem(historyItem)); \r\n  }, [dispatch, currentText, currentLanguage]); \r\n\r\n  // Remove all history entries\r\n  const handleClearHistory = () => { \r\n    dispatch(clearHistory()); \r\n  }; \r\n\r\n  // Provide history data and methods\r\n  return { \r\n    // Query execution history state\r\n    items, \r\n    metadata, \r\n    recentItems, \r\n\r\n    // History management methods\r\n    addToHistory: handleAddToHistory, \r\n    clearHistory: handleClearHistory, \r\n  }; \r\n};\r\n","// Component imports and type definitions\r\nimport { FC, memo, useCallback } from 'react'; \r\nimport CodeMirror from '@uiw/react-codemirror'; \r\nimport { sql } from '@codemirror/lang-sql'; \r\nimport { vscodeLight } from '@uiw/codemirror-theme-vscode'; \r\nimport { Button, ErrorBoundary, Select, LoadingBackdrop } from '@/components/common'; \r\nimport { useQuery, useResults } from '@/hooks'; \r\nimport { \r\n  CompanyNameType, \r\n  QueryInterface, \r\n  QueryOptionsType, \r\n  PredefinedQueryType \r\n} from '@/types'; \r\nimport './Query.scss'; \r\n\r\n// SQL query editor with code mirror integration\r\nconst QueryContent: FC<QueryInterface> = memo(({ \r\n  className = '' \r\n}) => { \r\n  // Initialize query and results state\r\n  const { \r\n    text, \r\n    isValid, \r\n    setText, \r\n    setValidity, \r\n    executeQuery \r\n  } = useQuery(); \r\n\r\n  const { status } = useResults(); \r\n\r\n  // Track query execution status\r\n  const isLoading = status === 'loading'; \r\n\r\n  // Handle query text changes and validation\r\n  const handleEditorChange = useCallback((value: string) => { \r\n    if (isLoading) {return;} \r\n    setText(value); \r\n\r\n    const trimmedValue = value.trim(); \r\n    // Validate if query matches \"select * from companyName\" format \r\n    const isValidQuery = /^select \\* from \\w+$/i.test(trimmedValue); \r\n    setValidity(isValidQuery); \r\n  }, [isLoading, setText, setValidity]); \r\n\r\n  // Execute SQL query with validation\r\n  const handleExecute = useCallback(() => { \r\n    if (!text.trim() || !isValid || isLoading) {return;} \r\n    executeQuery(); \r\n  }, [text, isValid, isLoading, executeQuery]); \r\n\r\n  // Handle keyboard shortcuts for query execution\r\n  const handleKeyDown = useCallback((e: React.KeyboardEvent) => { \r\n    if ((e.metaKey || e.ctrlKey) && e.key === 'Enter') { \r\n      e.preventDefault(); \r\n      handleExecute(); \r\n    } \r\n  }, [handleExecute]); \r\n\r\n  const queryOptions: QueryOptionsType = [ \r\n    { value: '', label: 'Select a predefined SQL query' }, \r\n    ...(['pega', 'atlan', 'google', 'microsoft', 'meta', 'apple'] as CompanyNameType[]).map(company => ({ \r\n      value: `select * from ${company}`, \r\n      label: `SELECT * FROM ${company.toUpperCase()}` \r\n    } as PredefinedQueryType)) \r\n  ]; \r\n\r\n  return ( \r\n    <section \r\n      id=\"query-editor\" \r\n      className={`query ${className}`.trim()} \r\n      aria-label=\"SQL Query Editor\" \r\n    > \r\n      <div \r\n        className=\"query-editor\" \r\n        role=\"group\" \r\n        aria-labelledby=\"editor-label\" \r\n      > \r\n        <label id=\"editor-label\" className=\"sr-only\">SQL Query Input</label> \r\n        <CodeMirror \r\n          value={text} \r\n          theme={vscodeLight} \r\n          extensions={[sql()]} \r\n          onChange={handleEditorChange} \r\n          onKeyDown={handleKeyDown} \r\n          basicSetup={{ \r\n            lineNumbers: true, \r\n            highlightActiveLine: true, \r\n            highlightActiveLineGutter: true, \r\n            foldGutter: false, \r\n            dropCursor: true, \r\n            allowMultipleSelections: true, \r\n            indentOnInput: true, \r\n            tabSize: 2 \r\n          }} \r\n          editable={!isLoading} \r\n          height=\"200px\" \r\n          minHeight=\"200px\" \r\n          aria-invalid={!isValid && !!text} \r\n        /> \r\n      </div> \r\n\r\n      <div \r\n        className=\"query-actions\" \r\n        role=\"toolbar\" \r\n        aria-label=\"SQL Query Actions\" \r\n      > \r\n        <Select \r\n          options={queryOptions} \r\n          value={text} \r\n          onChange={useCallback((value: string) => { \r\n            setText(value); \r\n            setValidity(!!value); \r\n          }, [setText, setValidity])} \r\n          placeholder=\"Select a predefined SQL query\" \r\n          size=\"sm\" \r\n          variant=\"outlined\" \r\n          disabled={isLoading} \r\n          aria-label=\"Select a predefined SQL query template\" \r\n        /> \r\n        <Button \r\n          onClick={() => { \r\n            setText(''); \r\n            setValidity(false); \r\n          }} \r\n          variant=\"outlined\" \r\n          disabled={!text.trim()} \r\n          aria-label=\"Reset SQL query input\" \r\n        > \r\n          Reset \r\n        </Button> \r\n        <Button \r\n          onClick={handleExecute} \r\n          disabled={!text.trim() || !isValid} \r\n          aria-label=\"Execute SQL query\" \r\n        > \r\n          Execute Query \r\n        </Button> \r\n      </div> \r\n\r\n      {isLoading && ( \r\n        <LoadingBackdrop \r\n          isLoading \r\n          loadingMessage=\"Executing SQL query, please wait...\" \r\n        /> \r\n      )} \r\n    </section> \r\n  ); \r\n}); \r\n\r\nQueryContent.displayName = 'QueryContent'; \r\n\r\n// Query component with error boundary wrapper\r\nexport const Query: FC<QueryInterface> = props => { \r\n  return ( \r\n    <ErrorBoundary \r\n      onError={(error: Error) => { \r\n        console.error('SQL Query Editor Error:', error); \r\n      }} \r\n    > \r\n      <QueryContent {...props} /> \r\n    </ErrorBoundary> \r\n  ); \r\n}; \r\n\r\nQuery.displayName = 'Query';\r\n","// Component imports and type definitions\r\nimport { FC } from 'react'; \r\nimport { Button } from '@/components/common'; \r\nimport { ExportFormatType, ResultsExportInterface } from '@/types'; \r\nimport './ResultsExport.scss'; \r\n\r\n// Export options component for results data\r\nexport const ResultsExport: FC<ResultsExportInterface> = ({ \r\n  onExport, \r\n  disabled = false, \r\n  'aria-label': ariaLabel, \r\n  'aria-controls': ariaControls, \r\n}) => { \r\n  // Handle keyboard accessibility for export buttons\r\n  const handleKeyDown = (e: React.KeyboardEvent, format: ExportFormatType) => { \r\n    if (e.key === 'Enter' || e.key === ' ') { \r\n      e.preventDefault(); \r\n      onExport(format); \r\n    } \r\n  }; \r\n\r\n  return ( \r\n    <div \r\n      className=\"results-export\" \r\n      role=\"group\" \r\n      aria-label={ariaLabel || \"Export options\"} \r\n      aria-controls={ariaControls} \r\n    > \r\n      <div className=\"results-export-buttons\"> \r\n        <Button \r\n          onClick={() => onExport('csv')} \r\n          onKeyDown={e => handleKeyDown(e, 'csv')} \r\n          disabled={disabled} \r\n          size=\"sm\" \r\n          aria-label=\"Export as CSV\" \r\n        > \r\n          Export CSV \r\n        </Button> \r\n\r\n        <Button \r\n          onClick={() => onExport('xlsx')} \r\n          onKeyDown={e => handleKeyDown(e, 'xlsx')} \r\n          disabled={disabled} \r\n          size=\"sm\" \r\n          aria-label=\"Export as Excel\" \r\n        > \r\n          Export Excel \r\n        </Button> \r\n\r\n        <Button \r\n          onClick={() => onExport('json')} \r\n          onKeyDown={e => handleKeyDown(e, 'json')} \r\n          disabled={disabled} \r\n          size=\"sm\" \r\n          aria-label=\"Export as JSON\" \r\n        > \r\n          Export JSON \r\n        </Button> \r\n      </div> \r\n    </div> \r\n  ); \r\n}; \r\n\r\nResultsExport.displayName = 'ResultsExport';\r\n","// Component imports and type definitions\r\nimport { FC } from 'react'; \r\nimport { ResultsExport } from './ResultsExport'; \r\nimport { ResultsToolbarInterface } from '@/types'; \r\nimport './ResultsToolbar.scss'; \r\n\r\n// Toolbar with search and export functionality\r\nconst ResultsToolbar: FC<ResultsToolbarInterface> = ({ \r\n  globalFilter, \r\n  onGlobalFilterChange, \r\n  onExport, \r\n  allowExport = true, \r\n  disabled = false \r\n}) => { \r\n  // Handle search input changes\r\n  const handleSearchChange = (value: string) => { \r\n    onGlobalFilterChange(value); \r\n  }; \r\n\r\n  // Clear search on escape key\r\n  const handleSearchKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => { \r\n    if (e.key === 'Escape' && globalFilter) { \r\n      e.preventDefault(); \r\n      handleSearchChange(''); \r\n      e.currentTarget.blur(); \r\n    } \r\n  }; \r\n\r\n  return ( \r\n    <div \r\n      className=\"results-toolbar\" \r\n      role=\"toolbar\" \r\n      aria-label=\"Results controls\" \r\n    > \r\n      <div className=\"results-search-wrapper\" role=\"search\"> \r\n        <label className=\"sr-only\">Search results</label> \r\n        <input \r\n          type=\"search\" \r\n          value={globalFilter || ''} \r\n          onChange={e => handleSearchChange(e.target.value)} \r\n          onKeyDown={handleSearchKeyDown} \r\n          placeholder=\"Search results...\" \r\n          className=\"results-toolbar-search\" \r\n          aria-label=\"Search results\" \r\n          disabled={disabled} \r\n        /> \r\n      </div> \r\n\r\n      {allowExport && ( \r\n        <ResultsExport \r\n          onExport={onExport} \r\n          disabled={disabled} \r\n          aria-label=\"Export options\" \r\n        /> \r\n      )} \r\n    </div> \r\n  ); \r\n}; \r\n\r\nResultsToolbar.displayName = 'ResultsToolbar'; \r\n\r\nexport default ResultsToolbar;\r\n","// Default pagination sizes for results grid\r\n// Initial page size\r\nexport const DEFAULT_PAGE_SIZE = 100;\r\nexport const PAGE_SIZES = [25, 50, 100, 250, 500] as const;\r\n","// Component imports and type definitions\r\nimport { FC, useCallback, useMemo } from 'react'; \r\nimport { Button, Select } from '@/components/common'; \r\nimport { ResultsPaginationInterface, PageSizeType } from '@/types'; \r\nimport { PAGE_SIZES } from '@/constants'; \r\nimport './ResultsPagination.scss'; \r\n\r\n// Pagination controls for results table\r\nconst ResultsPagination: FC<ResultsPaginationInterface> = ({ \r\n  pageIndex, \r\n  pageCount, \r\n  pageSize, \r\n  canPreviousPage, \r\n  canNextPage, \r\n  onPageSizeChange, \r\n  onPageChange, \r\n  onPreviousPage, \r\n  onNextPage \r\n}) => { \r\n  // Create options for rows per page select\r\n  const pageSizeOptions = useMemo(() => PAGE_SIZES.map((size: PageSizeType) => ({ \r\n    value: size.toString(), \r\n    label: `Show ${size} rows per page` \r\n  })), []); \r\n\r\n  // Handle rows per page selection\r\n  const handlePageSizeChange = useCallback((value: string) => { \r\n    onPageSizeChange(Number(value)); \r\n  }, [onPageSizeChange]); \r\n\r\n  // Keyboard navigation between pages\r\n  const handleKeyDown = (e: React.KeyboardEvent) => { \r\n    switch (e.key) { \r\n      case 'ArrowLeft': \r\n        if (canPreviousPage) { \r\n          e.preventDefault(); \r\n          onPreviousPage(); \r\n        } \r\n        break; \r\n      case 'ArrowRight': \r\n        if (canNextPage) { \r\n          e.preventDefault(); \r\n          onNextPage(); \r\n        } \r\n        break; \r\n    } \r\n  }; \r\n\r\n  return ( \r\n    <nav \r\n      className=\"results-pagination\" \r\n      role=\"navigation\" \r\n      aria-label=\"Results pagination\" \r\n      onKeyDown={handleKeyDown} \r\n    > \r\n      <div className=\"results-pagination-size\"> \r\n        <Select \r\n          options={pageSizeOptions} \r\n          value={pageSize.toString()} \r\n          onChange={handlePageSizeChange} \r\n          size=\"sm\" \r\n          variant=\"outlined\" \r\n          direction=\"up\" \r\n          disabled={pageCount === 0} \r\n          aria-label=\"Select rows per page\" \r\n        /> \r\n      </div> \r\n\r\n      <div className=\"results-pagination-nav\"> \r\n        <Button \r\n          size=\"sm\" \r\n          variant=\"outlined\" \r\n          onClick={() => onPageChange(0)} \r\n          disabled={!canPreviousPage} \r\n          aria-label=\"First page\" \r\n        > \r\n          {'<<'} \r\n        </Button> \r\n        <Button \r\n          size=\"sm\" \r\n          variant=\"outlined\" \r\n          onClick={onPreviousPage} \r\n          disabled={!canPreviousPage} \r\n          aria-label=\"Previous page\" \r\n        > \r\n          {'<'} \r\n        </Button> \r\n        <span className=\"results-pagination-info\"> \r\n          {pageCount === 0 ? ( \r\n            'Page 0 of 0' \r\n          ) : ( \r\n            `Page ${pageIndex + 1} of ${pageCount}` \r\n          )} \r\n        </span> \r\n        <Button \r\n          size=\"sm\" \r\n          variant=\"outlined\" \r\n          onClick={onNextPage} \r\n          disabled={!canNextPage} \r\n          aria-label=\"Next page\" \r\n        > \r\n          {'>'} \r\n        </Button> \r\n        <Button \r\n          size=\"sm\" \r\n          variant=\"outlined\" \r\n          onClick={() => onPageChange(pageCount - 1)} \r\n          disabled={!canNextPage} \r\n          aria-label=\"Last page\" \r\n        > \r\n          {'>>'} \r\n        </Button> \r\n      </div> \r\n    </nav> \r\n  ); \r\n}; \r\n\r\nResultsPagination.displayName = 'ResultsPagination'; \r\n\r\nexport default ResultsPagination;\r\n","// Component imports and type definitions\r\nimport { FC, memo, useCallback, useMemo, useRef, useState } from 'react'; \r\nimport { ErrorMessage, ErrorBoundary, LoadingBackdrop } from '@/components/common'; \r\nimport { useResults } from '@/hooks'; \r\nimport { exportResultsData } from '@/utils'; \r\nimport { \r\n  ExportFormatType, \r\n  ResultsInterface, \r\n  ResultsSortingStateType, \r\n  ResultsColumnFiltersStateType, \r\n  ResultsPaginationStateType, \r\n  ColumnDefinitionInterface, \r\n  CompanyRecordInterface \r\n} from '@/types'; \r\nimport { \r\n  useReactTable, \r\n  getCoreRowModel, \r\n  getSortedRowModel, \r\n  getFilteredRowModel, \r\n  getPaginationRowModel, \r\n  ColumnDef as TableColumnDef, \r\n} from '@tanstack/react-table'; \r\nimport { useVirtualizer } from '@tanstack/react-virtual'; \r\nimport Toolbar from './ResultsToolbar'; \r\nimport Pagination from './ResultsPagination'; \r\nimport './Results.scss'; \r\n\r\nconst DEFAULT_PAGE_SIZE = 100; \r\n\r\n// Results grid with virtualization and sorting\r\nconst ResultsContent: FC<ResultsInterface> = memo(({ \r\n  config = { \r\n    allowExport: true \r\n  }, \r\n  className = '' \r\n}) => { \r\n  // Table state management\r\n  const [sorting, setSorting] = useState<ResultsSortingStateType>([]); \r\n  const [columnFilters, setColumnFilters] = useState<ResultsColumnFiltersStateType>([]); \r\n  const [globalFilter, setGlobalFilter] = useState(''); \r\n  const [pagination, setPagination] = useState<ResultsPaginationStateType>({ \r\n    pageIndex: 0, \r\n    pageSize: DEFAULT_PAGE_SIZE \r\n  }); \r\n\r\n  // DOM refs and data hooks\r\n  const tableContainerRef = useRef<HTMLDivElement>(null); \r\n  const headerRef = useRef<HTMLDivElement>(null); \r\n  const { results, columns, status, error } = useResults(); \r\n  const isLoading = status === 'loading'; \r\n\r\n  // Configure table columns and data\r\n  const tableColumns = useMemo<TableColumnDef<CompanyRecordInterface>[]>(() => \r\n    columns.map((col: ColumnDefinitionInterface) => ({ \r\n      id: col.name, \r\n      accessorKey: col.name, \r\n      header: col.label, \r\n      size: col.size \r\n    })) \r\n  , [columns]); \r\n\r\n  const tableData = useMemo(() => results || [], [results]); \r\n\r\n  // Initialize table with features\r\n  const table = useReactTable({ \r\n    data: tableData, \r\n    columns: tableColumns, \r\n    state: { \r\n      sorting, \r\n      columnFilters, \r\n      globalFilter, \r\n      pagination \r\n    }, \r\n    onSortingChange: setSorting, \r\n    onColumnFiltersChange: setColumnFilters, \r\n    onGlobalFilterChange: setGlobalFilter, \r\n    onPaginationChange: setPagination, \r\n    getCoreRowModel: getCoreRowModel(), \r\n    getSortedRowModel: getSortedRowModel(), \r\n    getFilteredRowModel: getFilteredRowModel(), \r\n    getPaginationRowModel: getPaginationRowModel(), \r\n    enableSorting: true \r\n  }); \r\n\r\n  // Virtual scroll optimization\r\n  const { rows } = table.getRowModel(); \r\n  const rowVirtualizer = useVirtualizer({ \r\n    count: rows.length, \r\n    getScrollElement: () => tableContainerRef.current, \r\n    estimateSize: () => 40, \r\n    overscan: 5 \r\n  }); \r\n\r\n  // Event handlers for table actions\r\n  const handleExport = useCallback((format: ExportFormatType) => { \r\n    if (!results?.length) {return;} \r\n    exportResultsData(format, results, columns); \r\n  }, [results, columns]); \r\n\r\n  const handleTableScroll = () => { \r\n    if (headerRef.current && tableContainerRef.current) { \r\n      headerRef.current.scrollLeft = tableContainerRef.current.scrollLeft; \r\n    } \r\n  }; \r\n\r\n  // Table header with sorting indicators\r\n  const renderTableHeader = () => { \r\n    if (!rows.length) {return null;} \r\n    \r\n    return ( \r\n      <div \r\n        ref={headerRef} \r\n        className=\"results-table-header\" \r\n        role=\"rowgroup\" \r\n      > \r\n        {table.getHeaderGroups().map(headerGroup => ( \r\n          <div key={headerGroup.id} className=\"results-header\"> \r\n            {headerGroup.headers.map(header => ( \r\n              <div \r\n                key={header.id} \r\n                className=\"results-header-cell\" \r\n                style={{ width: header.getSize() }} \r\n                onClick={header.column.getToggleSortingHandler()} \r\n              > \r\n                {String(header.column.columnDef.header)} \r\n                {header.column.getIsSorted() && ( \r\n                  <span className={`results-header-sort is-${header.column.getIsSorted()}`}> \r\n                    {header.column.getIsSorted() === 'asc' ? '↑' : '↓'} \r\n                  </span> \r\n                )} \r\n              </div> \r\n            ))} \r\n          </div> \r\n        ))} \r\n      </div> \r\n    ); \r\n  }; \r\n\r\n  return ( \r\n    <section \r\n      id=\"results\" \r\n      className={`results ${className}`.trim()} \r\n      aria-label=\"Query Results\" \r\n    > \r\n      <div \r\n        className=\"results-content\" \r\n        role=\"grid\" \r\n        tabIndex={0} \r\n      > \r\n        <Toolbar \r\n          globalFilter={globalFilter} \r\n          onGlobalFilterChange={setGlobalFilter} \r\n          onExport={handleExport} \r\n          allowExport={config.allowExport} \r\n          disabled={!results?.length} \r\n        /> \r\n\r\n        <div className=\"results-table\"> \r\n          {renderTableHeader()} \r\n\r\n          <div \r\n            ref={tableContainerRef} \r\n            className=\"results-table-body\" \r\n            role=\"rowgroup\" \r\n            onScroll={handleTableScroll} \r\n          > \r\n            {error ? ( \r\n              <ErrorMessage \r\n                error={error} \r\n                title=\"Query Results Error\" \r\n              /> \r\n            ) : !rows.length ? ( \r\n              <div className=\"results-empty\"> \r\n                No Results Found \r\n              </div> \r\n            ) : ( \r\n              rowVirtualizer.getVirtualItems().map(virtualRow => { \r\n                const row = rows[virtualRow.index]; \r\n                return ( \r\n                  <div \r\n                    key={row.id} \r\n                    className=\"results-row\" \r\n                    role=\"row\" \r\n                    style={{ \r\n                      position: 'absolute', \r\n                      top: 0, \r\n                      left: 0, \r\n                      width: '100%', \r\n                      height: `${virtualRow.size}px`, \r\n                      transform: `translateY(${virtualRow.start}px)` \r\n                    }} \r\n                  > \r\n                    {row.getVisibleCells().map(cell => ( \r\n                      <div \r\n                        key={cell.id} \r\n                        className=\"results-cell\" \r\n                        role=\"cell\" \r\n                        style={{ width: cell.column.getSize() }} \r\n                      > \r\n                        {String(cell.getValue())} \r\n                      </div> \r\n                    ))} \r\n                  </div> \r\n                ); \r\n              }) \r\n            )} \r\n          </div> \r\n        </div> \r\n\r\n        <Pagination \r\n          pageIndex={pagination.pageIndex} \r\n          pageCount={table.getPageCount()} \r\n          pageSize={pagination.pageSize} \r\n          canPreviousPage={table.getCanPreviousPage()} \r\n          canNextPage={table.getCanNextPage()} \r\n          onPageSizeChange={(size: number) => table.setPageSize(size)} \r\n          onPageChange={(index: number) => table.setPageIndex(index)} \r\n          onPreviousPage={() => table.previousPage()} \r\n          onNextPage={() => table.nextPage()} \r\n        /> \r\n      </div> \r\n\r\n      {isLoading && ( \r\n        <LoadingBackdrop \r\n          isLoading \r\n          loadingMessage=\"Loading query results...\" \r\n        /> \r\n      )} \r\n    </section> \r\n  ); \r\n}); \r\n\r\nResultsContent.displayName = 'ResultsContent'; \r\n\r\n// Results component with error boundary\r\nexport const Results: FC<ResultsInterface> = props => { \r\n  return ( \r\n    <ErrorBoundary \r\n      onError={(error: Error) => { \r\n        console.error('Results Error:', error); \r\n      }} \r\n    > \r\n      <ResultsContent {...props} /> \r\n    </ErrorBoundary> \r\n  ); \r\n}; \r\n\r\nResults.displayName = 'Results';\r\n","// Component imports and type definitions\r\nimport { FC } from 'react'; \r\nimport { ErrorBoundary, Toast } from '@/components/common'; \r\nimport { useToasts } from '@/hooks'; \r\nimport { ToastItemInterface } from '@/types'; \r\nimport './Toasts.scss'; \r\n\r\n// Toast notifications container component\r\nconst ToastsContent: FC = () => { \r\n  // Get active toasts from store\r\n  const { toasts, remove } = useToasts(); \r\n\r\n  // Only render if there are active toasts\r\n  if (!toasts.length) {return null;} \r\n\r\n  return ( \r\n    <div \r\n      className=\"toasts\" \r\n      role=\"complementary\" \r\n      aria-label=\"Notifications\" \r\n    > \r\n      {toasts.slice().reverse().map((toast: ToastItemInterface) => ( \r\n        <Toast \r\n          key={toast.id} \r\n          {...toast} \r\n          onClose={remove} \r\n        /> \r\n      ))} \r\n    </div> \r\n  ); \r\n}; \r\n\r\nToastsContent.displayName = 'ToastsContent'; \r\n\r\n// Toasts component with error boundary\r\nexport const Toasts: FC = () => { \r\n  return ( \r\n    <ErrorBoundary \r\n      onError={(error: Error) => { \r\n        console.error('Toasts Error:', error); \r\n      }} \r\n    > \r\n      <ToastsContent /> \r\n    </ErrorBoundary> \r\n  ); \r\n}; \r\n\r\nToasts.displayName = 'Toasts';\r\n","import { useCallback } from 'react'; \r\nimport { useAppDispatch, useAppSelector } from '@/store/hooks'; \r\nimport { \r\n  addToast, \r\n  removeToast, \r\n  clearToasts, \r\n  selectAllToasts, \r\n  selectLatestToast, \r\n  selectToastsByType, \r\n  selectToastStats \r\n} from '@/store/slices'; \r\nimport { \r\n  ToastOptionsInterface, \r\n  UseToastsReturnInterface, \r\n  ToastVariantType, \r\n  ToastItemInterface \r\n} from '@/types'; \r\n\r\nexport const useToasts = (): UseToastsReturnInterface => { \r\n  const dispatch = useAppDispatch(); \r\n\r\n  // Get toast notifications state from store\r\n  const toasts = useAppSelector(selectAllToasts); \r\n  const latestToast = useAppSelector(selectLatestToast); \r\n  const toastsByType = useAppSelector(selectToastsByType); \r\n  const stats = useAppSelector(selectToastStats); \r\n\r\n  // Create and display new toast notification\r\n  const showToast = useCallback(( \r\n    message: string, \r\n    type: ToastVariantType, \r\n    options: ToastOptionsInterface = {} \r\n  ) => { \r\n    const toast: Omit<ToastItemInterface, 'id'> = { \r\n      type, \r\n      message, \r\n      ...options \r\n    }; \r\n    dispatch(addToast(toast)); \r\n  }, [dispatch]); \r\n\r\n  // Toast removal handlers\r\n  const handleRemoveToast = (id: string) => { \r\n    dispatch(removeToast(id)); \r\n  }; \r\n\r\n  const handleClearToasts = () => { \r\n    dispatch(clearToasts()); \r\n  }; \r\n\r\n  // Convenience methods for different toast types\r\n  const success = (message: string, options?: ToastOptionsInterface) => \r\n    showToast(message, 'success', options); \r\n\r\n  const error = (message: string, options?: ToastOptionsInterface) => \r\n    showToast(message, 'error', options); \r\n\r\n  const warning = (message: string, options?: ToastOptionsInterface) => \r\n    showToast(message, 'warning', options); \r\n\r\n  const info = (message: string, options?: ToastOptionsInterface) => \r\n    showToast(message, 'info', options); \r\n\r\n  return { \r\n    // Current toast notifications\r\n    toasts, \r\n    latestToast, \r\n    toastsByType, \r\n    stats, \r\n\r\n    // Toast management methods\r\n    remove: handleRemoveToast, \r\n    clear: handleClearToasts, \r\n    success, \r\n    error, \r\n    warning, \r\n    info \r\n  }; \r\n};\r\n","// Component imports and type definitions\r\nimport { FC } from 'react'; \r\nimport { ErrorBoundary } from '@/components/common'; \r\nimport { Query } from '../Query/Query'; \r\nimport { Results } from '../Results/Results'; \r\nimport { History } from '../History/History'; \r\nimport { WorkspaceInterface } from '@/types'; \r\nimport './Workspace.scss'; \r\n\r\n// Main workspace layout component\r\nconst WorkspaceContent: FC<WorkspaceInterface> = ({ \r\n  className = '' \r\n}) => { \r\n  // Handle keyboard shortcuts for workspace navigation\r\n  const handleKeyDown = (e: React.KeyboardEvent) => { \r\n    if ((e.altKey || e.metaKey) && ['1', '2', '3'].includes(e.key)) { \r\n      e.preventDefault(); \r\n      const target = document.querySelector<HTMLElement>(`#${ \r\n        e.key === '1' ? 'query' : \r\n        e.key === '2' ? 'results' : \r\n        'history' \r\n      }`); \r\n      target?.focus(); \r\n    } \r\n\r\n    // Escape to return to editor \r\n    if (e.key === 'Escape') { \r\n      e.preventDefault(); \r\n      document.querySelector<HTMLElement>('#query')?.focus(); \r\n    } \r\n  }; \r\n\r\n  return ( \r\n    <> \r\n      <nav className=\"skip-links\" aria-label=\"Skip to main sections\"> \r\n        <a href=\"#query\" className=\"skip-link\">Skip to Query</a> \r\n        <a href=\"#results\" className=\"skip-link\">Skip to Results</a> \r\n        <a href=\"#history\" className=\"skip-link\">Skip to History</a> \r\n      </nav> \r\n\r\n      <main \r\n        className={`workspace ${className}`.trim()} \r\n        role=\"main\" \r\n        aria-label=\"SQL Query Workspace\" \r\n        onKeyDown={handleKeyDown} \r\n      > \r\n        <div \r\n          className=\"workspace-main\" \r\n          role=\"region\" \r\n          aria-label=\"Main Editor and Results Area\" \r\n        > \r\n          <Query /> \r\n          <Results \r\n            config={{ \r\n              allowExport: true \r\n            }} \r\n          /> \r\n        </div> \r\n\r\n        <aside \r\n          className='workspace-aside' \r\n          aria-label=\"Query History Panel\" \r\n        > \r\n          <History /> \r\n        </aside> \r\n\r\n      </main> \r\n    </> \r\n  ); \r\n}; \r\n\r\nWorkspaceContent.displayName = 'WorkspaceContent'; \r\n\r\n// Workspace component with error boundary\r\nexport const Workspace: FC<WorkspaceInterface> = props => { \r\n  return ( \r\n    <ErrorBoundary \r\n      onError={(error: Error) => { \r\n        console.error('Workspace Error:', error); \r\n      }} \r\n    > \r\n      <WorkspaceContent {...props} /> \r\n    </ErrorBoundary> \r\n  ); \r\n}; \r\n\r\nWorkspace.displayName = 'Workspace';\r\n","import { configureStore } from '@reduxjs/toolkit'; \r\nimport { RootStoreInterface } from '@/types'; \r\nimport queryReducer from './slices/querySlice'; \r\nimport resultsReducer from './slices/resultsSlice'; \r\nimport historyReducer from './slices/historySlice'; \r\nimport toastReducer from './slices/toastSlice'; \r\n\r\n// Redux store configuration with feature reducers\r\nexport const store = configureStore<RootStoreInterface>({ \r\n  reducer: { \r\n    query: queryReducer, \r\n    results: resultsReducer, \r\n    history: historyReducer, \r\n    toast: toastReducer \r\n  } \r\n});\r\n","import { FC } from 'react'; \r\nimport { Workspace, Toasts } from '@/components/features'; \r\nimport { Provider as StoreProvider } from 'react-redux'; \r\nimport { store } from '@/store'; \r\nimport './styles/index.scss'; \r\n\r\n// Root application component with store provider\r\nconst App: FC = () => { \r\n  return ( \r\n    <StoreProvider store={store}> \r\n      <div className=\"app\"> \r\n        <Workspace /> \r\n        <Toasts /> \r\n      </div>\r\n    </StoreProvider>\r\n  ); \r\n}; \r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport App from './App'; \r\nimport { createRoot } from 'react-dom/client'; \r\nimport { Provider } from 'react-redux'; \r\nimport { store } from './store'; \r\nimport { reportWebVitals } from './utils'; \r\n\r\nconst container = document.getElementById('root'); \r\nif (!container) {throw new Error('Failed to find the root element');} \r\nconst root = createRoot(container); \r\n\r\nroot.render( \r\n  <React.StrictMode> \r\n    <Provider store={store}> \r\n      <App /> \r\n    </Provider> \r\n  </React.StrictMode> \r\n); \r\n\r\n// If you want to start measuring performance in your app, pass a function \r\n// to log results (for example: reportWebVitals(console.log)) \r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals \r\n// Report web vitals with console logging \r\nreportWebVitals(console.log);\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"static/js/\" + chunkId + \".\" + \"6bbaa091\" + \".chunk.js\";\n};","// This function allow to reference async chunks\n__webpack_require__.miniCssF = (chunkId) => {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.p = \"/\";","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t792: 0\n};\n\n__webpack_require__.f.j = (chunkId, promises) => {\n\t\t// JSONP chunk loading for javascript\n\t\tvar installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;\n\t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n\t\t\t// a Promise means \"currently loading\".\n\t\t\tif(installedChunkData) {\n\t\t\t\tpromises.push(installedChunkData[2]);\n\t\t\t} else {\n\t\t\t\tif(true) { // all chunks have JS\n\t\t\t\t\t// setup Promise in chunk cache\n\t\t\t\t\tvar promise = new Promise((resolve, reject) => (installedChunkData = installedChunks[chunkId] = [resolve, reject]));\n\t\t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n\t\t\t\t\t// start chunk loading\n\t\t\t\t\tvar url = __webpack_require__.p + __webpack_require__.u(chunkId);\n\t\t\t\t\t// create error before stack unwound to get useful stacktrace later\n\t\t\t\t\tvar error = new Error();\n\t\t\t\t\tvar loadingEnded = (event) => {\n\t\t\t\t\t\tif(__webpack_require__.o(installedChunks, chunkId)) {\n\t\t\t\t\t\t\tinstalledChunkData = installedChunks[chunkId];\n\t\t\t\t\t\t\tif(installedChunkData !== 0) installedChunks[chunkId] = undefined;\n\t\t\t\t\t\t\tif(installedChunkData) {\n\t\t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n\t\t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n\t\t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n\t\t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n\t\t\t\t\t\t\t\terror.type = errorType;\n\t\t\t\t\t\t\t\terror.request = realSrc;\n\t\t\t\t\t\t\t\tinstalledChunkData[1](error);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\t__webpack_require__.l(url, loadingEnded, \"chunk-\" + chunkId, chunkId);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n};\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunksql_workspace\"] = self[\"webpackChunksql_workspace\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [788,957,695,145], () => (__webpack_require__(5581)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["deferred","inProgress","dataWebpackPrefix","COLUMN_WIDTHS","columnDefinitions","name","type","label","size","departments","industries","companies","mockData","generateMockData","records","i","company","length","push","id","department","faker","helpers","arrayElement","employee_count","number","int","min","max","revenue","location","city","founded_year","ceo","person","fullName","industry","project_count","last_updated","date","recent","toLocaleDateString","year","month","day","Button","_ref","variant","loading","disabled","className","children","props","_objectWithoutProperties","_excluded","classes","concat","filter","Boolean","join","_jsxs","_objectSpread","_jsx","displayName","ErrorMessage","error","title","errorMessage","Error","message","trim","role","ErrorBoundary","Component","constructor","arguments","state","hasError","errorInfo","getDerivedStateFromError","componentDidCatch","_this$props$onError","_this$props","console","this","setState","onError","call","render","fallback","_this$state$error","errorComponent","LoadingSpinner","xmlns","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","cx","cy","r","opacity","d","LoadingBackdrop","isLoading","loadingMessage","Select","_options$","_options$2","options","value","onChange","placeholder","direction","ariaLabel","containerRef","useRef","measureRef","widthRef","isOpen","setIsOpen","useState","highlightedIndex","setHighlightedIndex","width","setWidth","useEffect","current","maxWidth","measurer","option","textContent","Math","offsetWidth","handler","event","contains","target","document","addEventListener","removeEventListener","selectedOption","find","opt","ref","onKeyDown","e","key","preventDefault","tabIndex","undefined","style","position","visibility","whiteSpace","fontFamily","fontSize","fontWeight","onClick","map","index","handleOptionClick","optionValue","Toast","onClose","duration","timer","setTimeout","clearTimeout","useAppDispatch","useDispatch","useAppSelector","useSelector","initialState","items","recentItems","maxItems","metadata","totalItems","avgExecutionTime","historySlice","createSlice","reducers","addItem","action","item","payload","unshift","executionTime","totalExecutionTime","reduce","sum","slice","pop","clearHistory","actions","selectHistoryItems","history","selectHistoryMetadata","selectRecentHistoryItems","data","status","totalRows","resultsSlice","setResults","columns","setLoading","setError","updateMetadata","clearResults","selectResultsState","results","selectResultsData","createSelector","_state$data","selectResultsColumns","selectResultsStatus","selectResultsError","selectResultsMetadata","generateId","uuid","exportResultsData","format","exportAsCSV","csvContent","col","row","String","blob","Blob","saveAs","Date","toISOString","exportAsExcel","headers","rows","worksheet","XLSXUtils","aoa_to_sheet","workbook","book_new","book_append_sheet","excelBuffer","writeXLSX","bookType","jsonContent","JSON","stringify","exportAsJSON","benchmarks","CLS","good","needsImprovement","FID","FCP","LCP","TTFB","formatValueWithUnit","metric","toFixed","stripAnsi","str","replace","printMetricTable","benchmark","rating","hexColor","getRating","threshold","diff","rawValue","rawThreshold","rawDiff","colorCodes","reset","color","coloredValue","coloredStatus","coloredDiff","Metric","Value","Threshold","Difference","Status","Object","keys","widths","h","formatCell","repeat","headerRow","separator","w","dataRow","borderTop","borderBottom","group","log","groupEnd","text","isValid","isDirty","language","lastQuery","querySlice","setQuery","setValidity","setLanguage","resetDirty","resetQuery","executeQuery","async","dispatch","getState","query","Promise","resolve","match","companyName","toLowerCase","filteredResults","record","resultsData","entries","charAt","toUpperCase","test","timestamp","now","historyItem","rowCount","selectQueryText","selectQueryValidity","selectQueryLanguage","selectQueryDirty","selectLastQuery","toastSlice","limit","stats","total","byType","success","warning","info","addToast","toast","removed","shift","removeToast","clearToasts","selectAllToasts","selectLatestToast","_state","toasts","selectToastsByType","acc","selectToastStats","t","useQuery","handleSetText","useCallback","handleSetValidity","handleResetDirty","handleSetLanguage","handleExecuteQuery","executeQueryAction","handleLoadQuery","queryText","setText","loadQuery","useResults","setResultsAction","clearResultsAction","exportData","HistoryContent","memo","useHistory","currentText","currentLanguage","addToHistory","executionData","handleClearHistory","handleKeyNavigation","historyItems","querySelectorAll","nextIndex","targetElement","focus","handleItemClick","entry","toLocaleTimeString","toLocaleString","round","History","QueryContent","handleEditorChange","trimmedValue","isValidQuery","handleExecute","handleKeyDown","metaKey","ctrlKey","queryOptions","CodeMirror","theme","vscodeLight","extensions","sql","basicSetup","lineNumbers","highlightActiveLine","highlightActiveLineGutter","foldGutter","dropCursor","allowMultipleSelections","indentOnInput","tabSize","editable","height","minHeight","Query","ResultsExport","onExport","ariaControls","ResultsToolbar","globalFilter","onGlobalFilterChange","allowExport","handleSearchChange","currentTarget","blur","PAGE_SIZES","ResultsPagination","pageIndex","pageCount","pageSize","canPreviousPage","canNextPage","onPageSizeChange","onPageChange","onPreviousPage","onNextPage","pageSizeOptions","useMemo","toString","handlePageSizeChange","Number","ResultsContent","config","sorting","setSorting","columnFilters","setColumnFilters","setGlobalFilter","pagination","setPagination","tableContainerRef","headerRef","tableColumns","accessorKey","header","tableData","table","useReactTable","onSortingChange","onColumnFiltersChange","onPaginationChange","getCoreRowModel","getSortedRowModel","getFilteredRowModel","getPaginationRowModel","enableSorting","getRowModel","rowVirtualizer","useVirtualizer","count","getScrollElement","estimateSize","overscan","handleExport","Toolbar","getHeaderGroups","headerGroup","getSize","column","getToggleSortingHandler","columnDef","getIsSorted","onScroll","handleTableScroll","scrollLeft","getVirtualItems","virtualRow","top","left","transform","start","getVisibleCells","cell","getValue","Pagination","getPageCount","getCanPreviousPage","getCanNextPage","setPageSize","setPageIndex","previousPage","nextPage","Results","ToastsContent","remove","useToasts","latestToast","toastsByType","showToast","clear","handleClearToasts","reverse","Toasts","WorkspaceContent","_Fragment","href","altKey","includes","querySelector","_document$querySelect","Workspace","store","configureStore","reducer","queryReducer","resultsReducer","historyReducer","toastReducer","App","StoreProvider","container","getElementById","onPerfEntry","createRoot","React","Provider","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","m","O","result","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","j","every","splice","definition","o","defineProperty","enumerable","get","f","chunkId","all","promises","u","miniCssF","g","globalThis","window","obj","prop","prototype","hasOwnProperty","l","url","done","script","needAttach","scripts","getElementsByTagName","s","getAttribute","createElement","charset","timeout","nc","setAttribute","src","onScriptComplete","prev","onerror","onload","doneFns","parentNode","removeChild","forEach","bind","head","appendChild","Symbol","toStringTag","p","installedChunks","installedChunkData","promise","reject","errorType","realSrc","request","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","some","chunkLoadingGlobal","self","__webpack_exports__"],"sourceRoot":""}